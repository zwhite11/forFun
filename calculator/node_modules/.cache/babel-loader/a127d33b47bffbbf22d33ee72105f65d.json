{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { expNumber } from '../../plain/number';\nconst name = 'exp';\nconst dependencies = ['typed'];\nexport const createExp =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed\n}) => {\n  /**\n   * Calculate the exponent of a value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.exp(x)\n   *\n   * Examples:\n   *\n   *    math.exp(2)                  // returns number 7.3890560989306495\n   *    math.pow(math.e, 2)          // returns number 7.3890560989306495\n   *    math.log(math.exp(2))        // returns number 2\n   *\n   *    math.exp([1, 2, 3])\n   *    // returns Array [\n   *    //   2.718281828459045,\n   *    //   7.3890560989306495,\n   *    //   20.085536923187668\n   *    // ]\n   *\n   * See also:\n   *\n   *    expm1, log, pow\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to exponentiate\n   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`\n   */\n  const exp = typed(name, {\n    'number': expNumber,\n    'Complex': function (x) {\n      return x.exp();\n    },\n    'BigNumber': function (x) {\n      return x.exp();\n    },\n    'Array | Matrix': function (x) {\n      // TODO: exp(sparse) should return a dense matrix since exp(0)==1\n      return deepMap(x, exp);\n    }\n  });\n  return exp;\n});","map":null,"metadata":{},"sourceType":"module"}