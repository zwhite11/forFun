{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nconst name = 'arg';\nconst dependencies = ['typed'];\nexport const createArg =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed\n}) => {\n  /**\n   * Compute the argument of a complex value.\n   * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.arg(x)\n   *\n   * Examples:\n   *\n   *    const a = math.complex(2, 2)\n   *    math.arg(a) / math.pi          // returns number 0.25\n   *\n   *    const b = math.complex('2 + 3i')\n   *    math.arg(b)                    // returns number 0.982793723247329\n   *    math.atan2(3, 2)               // returns number 0.982793723247329\n   *\n   * See also:\n   *\n   *    re, im, conj, abs\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            A complex number or array with complex numbers\n   * @return {number | BigNumber | Array | Matrix} The argument of x\n   */\n  const arg = typed(name, {\n    'number': function (x) {\n      return Math.atan2(0, x);\n    },\n    'BigNumber': function (x) {\n      return x.constructor.atan2(0, x);\n    },\n    'Complex': function (x) {\n      return x.arg();\n    },\n    // TODO: implement BigNumber support for function arg\n    'Array | Matrix': function (x) {\n      return deepMap(x, arg);\n    }\n  });\n  return arg;\n});","map":null,"metadata":{},"sourceType":"module"}