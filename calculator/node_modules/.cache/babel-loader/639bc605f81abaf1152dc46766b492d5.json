{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { addNumber } from '../../plain/number';\nconst name = 'addScalar';\nconst dependencies = ['typed'];\nexport const createAddScalar =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed\n}) => {\n  /**\n   * Add two scalar values, `x + y`.\n   * This function is meant for internal use: it is used by the public function\n   * `add`\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Sum of `x` and `y`\n   * @private\n   */\n  const addScalar = typed(name, {\n    'number, number': addNumber,\n    'Complex, Complex': function (x, y) {\n      return x.add(y);\n    },\n    'BigNumber, BigNumber': function (x, y) {\n      return x.plus(y);\n    },\n    'Fraction, Fraction': function (x, y) {\n      return x.add(y);\n    },\n    'Unit, Unit': function (x, y) {\n      if (x.value === null || x.value === undefined) throw new Error('Parameter x contains a unit with undefined value');\n      if (y.value === null || y.value === undefined) throw new Error('Parameter y contains a unit with undefined value');\n      if (!x.equalBase(y)) throw new Error('Units do not match');\n      const res = x.clone();\n      res.value = addScalar(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    }\n  });\n  return addScalar;\n});","map":null,"metadata":{},"sourceType":"module"}