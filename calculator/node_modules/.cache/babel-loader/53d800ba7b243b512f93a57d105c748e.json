{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nconst name = 'acos';\nconst dependencies = ['typed', 'config', 'Complex'];\nexport const createAcos =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  config,\n  Complex\n}) => {\n  /**\n   * Calculate the inverse cosine of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.acos(x)\n   *\n   * Examples:\n   *\n   *    math.acos(0.5)           // returns number 1.0471975511965979\n   *    math.acos(math.cos(1.5)) // returns number 1.5\n   *\n   *    math.acos(2)             // returns Complex 0 + 1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    cos, atan, asin\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x  Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} The arc cosine of x\n   */\n  const acos = typed(name, {\n    'number': function (x) {\n      if (x >= -1 && x <= 1 || config.predictable) {\n        return Math.acos(x);\n      } else {\n        return new Complex(x, 0).acos();\n      }\n    },\n    'Complex': function (x) {\n      return x.acos();\n    },\n    'BigNumber': function (x) {\n      return x.acos();\n    },\n    'Array | Matrix': function (x) {\n      return deepMap(x, acos);\n    }\n  });\n  return acos;\n});","map":null,"metadata":{},"sourceType":"module"}