{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { unaryPlusNumber } from '../../plain/number';\nconst name = 'unaryPlus';\nconst dependencies = ['typed', 'config', 'BigNumber'];\nexport const createUnaryPlus =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  config,\n  BigNumber\n}) => {\n  /**\n   * Unary plus operation.\n   * Boolean values and strings will be converted to a number, numeric values will be returned as is.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.unaryPlus(x)\n   *\n   * Examples:\n   *\n   *    math.unaryPlus(3.5)      // returns 3.5\n   *    math.unaryPlus(1)     // returns 1\n   *\n   * See also:\n   *\n   *    unaryMinus, add, subtract\n   *\n   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x\n   *            Input value\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Returns the input value when numeric, converts to a number when input is non-numeric.\n   */\n  const unaryPlus = typed(name, {\n    'number': unaryPlusNumber,\n    'Complex': function (x) {\n      return x; // complex numbers are immutable\n    },\n    'BigNumber': function (x) {\n      return x; // bignumbers are immutable\n    },\n    'Fraction': function (x) {\n      return x; // fractions are immutable\n    },\n    'Unit': function (x) {\n      return x.clone();\n    },\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since unaryPlus(0) = 0\n      return deepMap(x, unaryPlus, true);\n    },\n    'boolean | string': function (x) {\n      // convert to a number or bignumber\n      return config.number === 'BigNumber' ? new BigNumber(+x) : +x;\n    }\n  });\n  return unaryPlus;\n});","map":null,"metadata":{},"sourceType":"module"}