{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { createAlgorithm02 } from '../../type/matrix/utils/algorithm02';\nimport { createAlgorithm03 } from '../../type/matrix/utils/algorithm03';\nimport { createAlgorithm07 } from '../../type/matrix/utils/algorithm07';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nconst name = 'dotDivide';\nconst dependencies = ['typed', 'matrix', 'equalScalar', 'divideScalar', 'DenseMatrix'];\nexport const createDotDivide =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  matrix,\n  equalScalar,\n  divideScalar,\n  DenseMatrix\n}) => {\n  const algorithm02 = createAlgorithm02({\n    typed,\n    equalScalar\n  });\n  const algorithm03 = createAlgorithm03({\n    typed\n  });\n  const algorithm07 = createAlgorithm07({\n    typed,\n    DenseMatrix\n  });\n  const algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  const algorithm12 = createAlgorithm12({\n    typed,\n    DenseMatrix\n  });\n  const algorithm13 = createAlgorithm13({\n    typed\n  });\n  const algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Divide two matrices element wise. The function accepts both matrices and\n   * scalar values.\n   *\n   * Syntax:\n   *\n   *    math.dotDivide(x, y)\n   *\n   * Examples:\n   *\n   *    math.dotDivide(2, 4)   // returns 0.5\n   *\n   *    a = [[9, 5], [6, 1]]\n   *    b = [[3, 2], [5, 2]]\n   *\n   *    math.dotDivide(a, b)   // returns [[3, 2.5], [1.2, 0.5]]\n   *    math.divide(a, b)      // returns [[1.75, 0.75], [-1.75, 2.25]]\n   *\n   * See also:\n   *\n   *    divide, multiply, dotMultiply\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`\n   */\n\n  const dotDivide = typed(name, {\n    'any, any': divideScalar,\n    'SparseMatrix, SparseMatrix': function (x, y) {\n      return algorithm07(x, y, divideScalar, false);\n    },\n    'SparseMatrix, DenseMatrix': function (x, y) {\n      return algorithm02(y, x, divideScalar, true);\n    },\n    'DenseMatrix, SparseMatrix': function (x, y) {\n      return algorithm03(x, y, divideScalar, false);\n    },\n    'DenseMatrix, DenseMatrix': function (x, y) {\n      return algorithm13(x, y, divideScalar);\n    },\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return dotDivide(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return dotDivide(matrix(x), y);\n    },\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return dotDivide(x, matrix(y));\n    },\n    'SparseMatrix, any': function (x, y) {\n      return algorithm11(x, y, divideScalar, false);\n    },\n    'DenseMatrix, any': function (x, y) {\n      return algorithm14(x, y, divideScalar, false);\n    },\n    'any, SparseMatrix': function (x, y) {\n      return algorithm12(y, x, divideScalar, true);\n    },\n    'any, DenseMatrix': function (x, y) {\n      return algorithm14(y, x, divideScalar, true);\n    },\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, divideScalar, false).valueOf();\n    },\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, divideScalar, true).valueOf();\n    }\n  });\n  return dotDivide;\n});","map":null,"metadata":{},"sourceType":"module"}