{"ast":null,"code":"import { flatten } from '../../utils/array';\nimport { factory } from '../../utils/factory';\nconst name = 'setMultiplicity';\nconst dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];\nexport const createSetMultiplicity =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  size,\n  subset,\n  compareNatural,\n  Index\n}) => {\n  /**\n   * Count the multiplicity of an element in a multiset.\n   * A multi-dimension array will be converted to a single-dimension array before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setMultiplicity(element, set)\n   *\n   * Examples:\n   *\n   *    math.setMultiplicity(1, [1, 2, 2, 4])    // returns 1\n   *    math.setMultiplicity(2, [1, 2, 2, 4])    // returns 2\n   *\n   * See also:\n   *\n   *    setDistinct, setSize\n   *\n   * @param {number | BigNumber | Fraction | Complex} e  An element in the multiset\n   * @param {Array | Matrix}     a  A multiset\n   * @return {number}            The number of how many times the multiset contains the element\n   */\n  return typed(name, {\n    'number | BigNumber | Fraction | Complex, Array | Matrix': function (e, a) {\n      if (subset(size(a), new Index(0)) === 0) {\n        // if empty, return 0\n        return 0;\n      }\n\n      const b = flatten(Array.isArray(a) ? a : a.toArray());\n      let count = 0;\n\n      for (let i = 0; i < b.length; i++) {\n        if (compareNatural(b[i], e) === 0) {\n          count++;\n        }\n      }\n\n      return count;\n    }\n  });\n});","map":null,"metadata":{},"sourceType":"module"}