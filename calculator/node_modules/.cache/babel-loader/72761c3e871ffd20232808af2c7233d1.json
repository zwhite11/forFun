{"ast":null,"code":"import { deepMap } from '../../utils/collection';\nimport { factory } from '../../utils/factory';\nimport { isPositiveNumber } from '../../plain/number';\nconst name = 'isPositive';\nconst dependencies = ['typed'];\nexport const createIsPositive =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed\n}) => {\n  /**\n   * Test whether a value is positive: larger than zero.\n   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isPositive(x)\n   *\n   * Examples:\n   *\n   *    math.isPositive(3)                     // returns true\n   *    math.isPositive(-2)                    // returns false\n   *    math.isPositive(0)                     // returns false\n   *    math.isPositive(-0)                    // returns false\n   *    math.isPositive(0.5)                   // returns true\n   *    math.isPositive(math.bignumber(2))     // returns true\n   *    math.isPositive(math.fraction(-2, 5))  // returns false\n   *    math.isPositive(math.fraction(1,3))    // returns false\n   *    math.isPositive('2')                   // returns true\n   *    math.isPositive([2, 0, -3])            // returns [true, false, false]\n   *\n   * See also:\n   *\n   *    isNumeric, isZero, isNegative, isInteger\n   *\n   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is larger than zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  const isPositive = typed(name, {\n    'number': isPositiveNumber,\n    'BigNumber': function (x) {\n      return !x.isNeg() && !x.isZero() && !x.isNaN();\n    },\n    'Fraction': function (x) {\n      return x.s > 0 && x.n > 0;\n    },\n    'Unit': function (x) {\n      return isPositive(x.value);\n    },\n    'Array | Matrix': function (x) {\n      return deepMap(x, isPositive);\n    }\n  });\n  return isPositive;\n});","map":null,"metadata":{},"sourceType":"module"}