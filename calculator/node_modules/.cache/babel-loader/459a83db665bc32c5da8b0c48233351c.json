{"ast":null,"code":"import { deepMap } from '../../utils/collection';\nimport { factory } from '../../utils/factory';\nimport { notNumber } from '../../plain/number';\nconst name = 'not';\nconst dependencies = ['typed'];\nexport const createNot =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed\n}) => {\n  /**\n   * Logical `not`. Flips boolean value of a given parameter.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.not(x)\n   *\n   * Examples:\n   *\n   *    math.not(2)      // returns false\n   *    math.not(0)      // returns true\n   *    math.not(true)   // returns false\n   *\n   *    a = [2, -7, 0]\n   *    math.not(a)      // returns [false, false, true]\n   *\n   * See also:\n   *\n   *    and, or, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when input is a zero or empty value.\n   */\n  const not = typed(name, {\n    'number': notNumber,\n    'Complex': function (x) {\n      return x.re === 0 && x.im === 0;\n    },\n    'BigNumber': function (x) {\n      return x.isZero() || x.isNaN();\n    },\n    'Unit': function (x) {\n      return x.value !== null ? not(x.value) : true;\n    },\n    'Array | Matrix': function (x) {\n      return deepMap(x, not);\n    }\n  });\n  return not;\n});","map":null,"metadata":{},"sourceType":"module"}