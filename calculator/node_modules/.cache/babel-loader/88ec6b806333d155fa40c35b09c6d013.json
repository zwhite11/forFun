{"ast":null,"code":"import { factory } from '../utils/factory';\nimport { deepMap } from '../utils/collection';\nimport { format } from '../utils/number';\nconst name = 'string';\nconst dependencies = ['typed'];\nexport const createString =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed\n}) => {\n  /**\n   * Create a string or convert any object into a string.\n   * Elements of Arrays and Matrices are processed element wise.\n   *\n   * Syntax:\n   *\n   *    math.string(value)\n   *\n   * Examples:\n   *\n   *    math.string(4.2)               // returns string '4.2'\n   *    math.string(math.complex(3, 2) // returns string '3 + 2i'\n   *\n   *    const u = math.unit(5, 'km')\n   *    math.string(u.to('m'))         // returns string '5000 m'\n   *\n   *    math.string([true, false])     // returns ['true', 'false']\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, number, unit\n   *\n   * @param {* | Array | Matrix | null} [value]  A value to convert to a string\n   * @return {string | Array | Matrix} The created string\n   */\n  const string = typed(name, {\n    '': function () {\n      return '';\n    },\n    'number': format,\n    'null': function (x) {\n      return 'null';\n    },\n    'boolean': function (x) {\n      return x + '';\n    },\n    'string': function (x) {\n      return x;\n    },\n    'Array | Matrix': function (x) {\n      return deepMap(x, string);\n    },\n    'any': function (x) {\n      return String(x);\n    }\n  });\n  return string;\n});","map":null,"metadata":{},"sourceType":"module"}