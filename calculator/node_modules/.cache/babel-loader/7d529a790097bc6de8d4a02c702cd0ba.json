{"ast":null,"code":"import { factory } from '../../../utils/factory';\nimport { DimensionError } from '../../../error/DimensionError';\nconst name = 'algorithm07';\nconst dependencies = ['typed', 'DenseMatrix'];\nexport const createAlgorithm07 =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  DenseMatrix\n}) => {\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j) = f(Aij, Bij)\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function algorithm07(a, b, callback) {\n    // sparse matrix arrays\n    const asize = a._size;\n    const adt = a._datatype; // sparse matrix arrays\n\n    const bsize = b._size;\n    const bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    const rows = asize[0];\n    const columns = asize[1]; // datatype\n\n    let dt; // zero value\n\n    let zero = 0; // callback signature to use\n\n    let cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // vars\n\n\n    let i, j; // result arrays\n\n    const cdata = []; // initialize c\n\n    for (i = 0; i < rows; i++) {\n      cdata[i] = [];\n    } // matrix\n\n\n    const c = new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspaces\n\n    const xa = [];\n    const xb = []; // marks indicating we have a value in x for a given column\n\n    const wa = [];\n    const wb = []; // loop columns\n\n    for (j = 0; j < columns; j++) {\n      // columns mark\n      const mark = j + 1; // scatter the values of A(:,j) into workspace\n\n      _scatter(a, j, wa, xa, mark); // scatter the values of B(:,j) into workspace\n\n\n      _scatter(b, j, wb, xb, mark); // loop rows\n\n\n      for (i = 0; i < rows; i++) {\n        // matrix values @ i,j\n        const va = wa[i] === mark ? xa[i] : zero;\n        const vb = wb[i] === mark ? xb[i] : zero; // invoke callback\n\n        cdata[i][j] = cf(va, vb);\n      }\n    } // return sparse matrix\n\n\n    return c;\n  };\n\n  function _scatter(m, j, w, x, mark) {\n    // a arrays\n    const values = m._values;\n    const index = m._index;\n    const ptr = m._ptr; // loop values in column j\n\n    for (let k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {\n      // row\n      const i = index[k]; // update workspace\n\n      w[i] = mark;\n      x[i] = values[k];\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module"}