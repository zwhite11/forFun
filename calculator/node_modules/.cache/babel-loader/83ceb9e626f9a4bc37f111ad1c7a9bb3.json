{"ast":null,"code":"import { arraySize } from '../../utils/array';\nimport { factory } from '../../utils/factory';\nimport { noMatrix } from '../../utils/noop';\nconst name = 'size';\nconst dependencies = ['typed', 'config', '?matrix'];\nexport const createSize =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  config,\n  matrix\n}) => {\n  /**\n   * Calculate the size of a matrix or scalar.\n   *\n   * Syntax:\n   *\n   *     math.size(x)\n   *\n   * Examples:\n   *\n   *     math.size(2.3)                  // returns []\n   *     math.size('hello world')        // returns [11]\n   *\n   *     const A = [[1, 2, 3], [4, 5, 6]]\n   *     math.size(A)                    // returns [2, 3]\n   *     math.size(math.range(1,6))      // returns [5]\n   *\n   * See also:\n   *\n   *     resize, squeeze, subset\n   *\n   * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix\n   * @return {Array | Matrix} A vector with size of `x`.\n   */\n  return typed(name, {\n    'Matrix': function (x) {\n      return x.create(x.size());\n    },\n    'Array': arraySize,\n    'string': function (x) {\n      return config.matrix === 'Array' ? [x.length] : matrix([x.length]);\n    },\n    'number | Complex | BigNumber | Unit | boolean | null': function (x) {\n      // scalar\n      return config.matrix === 'Array' ? [] : matrix ? matrix([]) : noMatrix();\n    }\n  });\n});","map":null,"metadata":{},"sourceType":"module"}