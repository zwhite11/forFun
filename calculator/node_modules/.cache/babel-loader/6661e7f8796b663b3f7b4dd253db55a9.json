{"ast":null,"code":"import { errorTransform } from './utils/errorTransform';\nimport { factory } from '../../utils/factory';\nimport { createApply } from '../../function/matrix/apply';\nimport { isBigNumber, isNumber } from '../../utils/is';\nconst name = 'apply';\nconst dependencies = ['typed', 'isInteger'];\n/**\n * Attach a transform function to math.apply\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `dim` parameter of function apply\n * from one-based to zero based\n */\n\nexport const createApplyTransform =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  isInteger\n}) => {\n  const apply = createApply({\n    typed,\n    isInteger\n  }); // @see: comment of concat itself\n\n  return typed('apply', {\n    '...any': function (args) {\n      // change dim from one-based to zero-based\n      const dim = args[1];\n\n      if (isNumber(dim)) {\n        args[1] = dim - 1;\n      } else if (isBigNumber(dim)) {\n        args[1] = dim.minus(1);\n      }\n\n      try {\n        return apply.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","map":null,"metadata":{},"sourceType":"module"}