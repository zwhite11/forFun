{"ast":null,"code":"// TODO: deprecated since version 6.0.0. Date: 2019-04-14\n// \"deprecatedEval\" is also exposed as \"eval\" in the code compiled to ES5+CommonJs\nimport { createDeprecatedEval } from '../expression/function/eval';\nimport { createDeprecatedImport } from '../core/function/deprecatedImport';\nimport { createDeprecatedVar } from '../function/statistics/variance';\nimport { createDeprecatedTypeof } from '../function/utils/typeOf';\nimport { isAccessorNode, isArray, isArrayNode, isAssignmentNode, isBigNumber, isBlockNode, isBoolean, isChain, isCollection, isComplex, isConditionalNode, isConstantNode, isDate, isDenseMatrix, isFraction, isFunction, isFunctionAssignmentNode, isFunctionNode, isHelp, isIndex, isIndexNode, isMatrix, isNode, isNull, isNumber, isObject, isObjectNode, isOperatorNode, isParenthesisNode, isRange, isRangeNode, isRegExp, isResultSet, isSparseMatrix, isString, isSymbolNode, isUndefined, isUnit } from '../utils/is';\nimport { ArgumentsError } from '../error/ArgumentsError';\nimport { DimensionError } from '../error/DimensionError';\nimport { IndexError } from '../error/IndexError';\nimport { lazy } from '../utils/object';\nimport { warnOnce } from '../utils/log';\nimport { BigNumber, Complex, DenseMatrix, FibonacciHeap, Fraction, ImmutableDenseMatrix, Index, Matrix, ResultSet, Range, Spa, SparseMatrix, typeOf, Unit, variance } from './pureFunctionsAny.generated';\nimport { AccessorNode, ArrayNode, AssignmentNode, BlockNode, Chain, ConditionalNode, ConstantNode, evaluate, FunctionAssignmentNode, FunctionNode, Help, IndexNode, Node, ObjectNode, OperatorNode, ParenthesisNode, parse, Parser, RangeNode, RelationalNode, reviver, SymbolNode } from './impureFunctionsAny.generated';\nexport const deprecatedEval =\n/* #__PURE__ */\ncreateDeprecatedEval({\n  evaluate\n}); // \"deprecatedImport\" is also exposed as \"import\" in the code compiled to ES5+CommonJs\n\nexport const deprecatedImport =\n/* #__PURE__ */\ncreateDeprecatedImport({}); // \"deprecatedVar\" is also exposed as \"var\" in the code compiled to ES5+CommonJs\n\nexport const deprecatedVar =\n/* #__PURE__ */\ncreateDeprecatedVar({\n  variance\n}); // \"deprecatedTypeof\" is also exposed as \"typeof\" in the code compiled to ES5+CommonJs\n\nexport const deprecatedTypeof =\n/* #__PURE__ */\ncreateDeprecatedTypeof({\n  typeOf\n});\nexport const type =\n/* #__PURE__ */\ncreateDeprecatedProperties('type', {\n  isNumber,\n  isComplex,\n  isBigNumber,\n  isFraction,\n  isUnit,\n  isString,\n  isArray,\n  isMatrix,\n  isCollection,\n  isDenseMatrix,\n  isSparseMatrix,\n  isRange,\n  isIndex,\n  isBoolean,\n  isResultSet,\n  isHelp,\n  isFunction,\n  isDate,\n  isRegExp,\n  isObject,\n  isNull,\n  isUndefined,\n  isAccessorNode,\n  isArrayNode,\n  isAssignmentNode,\n  isBlockNode,\n  isConditionalNode,\n  isConstantNode,\n  isFunctionAssignmentNode,\n  isFunctionNode,\n  isIndexNode,\n  isNode,\n  isObjectNode,\n  isOperatorNode,\n  isParenthesisNode,\n  isRangeNode,\n  isSymbolNode,\n  isChain,\n  BigNumber,\n  Chain,\n  Complex,\n  Fraction,\n  Matrix,\n  DenseMatrix,\n  SparseMatrix,\n  Spa,\n  FibonacciHeap,\n  ImmutableDenseMatrix,\n  Index,\n  Range,\n  ResultSet,\n  Unit,\n  Help,\n  Parser\n});\nexport const expression =\n/* #__PURE__ */\ncreateDeprecatedProperties('expression', {\n  parse,\n  Parser,\n  node: createDeprecatedProperties('expression.node', {\n    AccessorNode,\n    ArrayNode,\n    AssignmentNode,\n    BlockNode,\n    ConditionalNode,\n    ConstantNode,\n    IndexNode,\n    FunctionAssignmentNode,\n    FunctionNode,\n    Node,\n    ObjectNode,\n    OperatorNode,\n    ParenthesisNode,\n    RangeNode,\n    RelationalNode,\n    SymbolNode\n  })\n});\nexport const json =\n/* #__PURE__ */\ncreateDeprecatedProperties('json', {\n  reviver\n});\nexport const error =\n/* #__PURE__ */\ncreateDeprecatedProperties('error', {\n  ArgumentsError,\n  DimensionError,\n  IndexError\n});\n\nfunction createDeprecatedProperties(path, props) {\n  const obj = {};\n  Object.keys(props).forEach(name => {\n    lazy(obj, name, () => {\n      warnOnce(\"math.\".concat(path, \".\").concat(name, \" is moved to math.\").concat(name, \" in v6.0.0. \") + 'Please use the new location instead.');\n      return props[name];\n    });\n  });\n  return obj;\n}","map":null,"metadata":{},"sourceType":"module"}