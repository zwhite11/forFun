{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { acscNumber } from '../../plain/number';\nconst name = 'acsc';\nconst dependencies = ['typed', 'config', 'Complex', 'BigNumber'];\nexport const createAcsc =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  config,\n  Complex,\n  BigNumber\n}) => {\n  /**\n   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.acsc(x)\n   *\n   * Examples:\n   *\n   *    math.acsc(0.5)           // returns number 0.5235987755982989\n   *    math.acsc(math.csc(1.5)) // returns number ~1.5\n   *\n   *    math.acsc(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    csc, asin, asec\n   *\n   * @param {number | Complex | Array | Matrix} x   Function input\n   * @return {number | Complex | Array | Matrix} The arc cosecant of x\n   */\n  const acsc = typed(name, {\n    'number': function (x) {\n      if (x <= -1 || x >= 1 || config.predictable) {\n        return acscNumber(x);\n      }\n\n      return new Complex(x, 0).acsc();\n    },\n    'Complex': function (x) {\n      return x.acsc();\n    },\n    'BigNumber': function (x) {\n      return new BigNumber(1).div(x).asin();\n    },\n    'Array | Matrix': function (x) {\n      return deepMap(x, acsc);\n    }\n  });\n  return acsc;\n});","map":null,"metadata":{},"sourceType":"module"}