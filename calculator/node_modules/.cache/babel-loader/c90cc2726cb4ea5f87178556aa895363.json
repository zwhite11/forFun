{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { tanh as _tanh } from '../../utils/number';\nconst name = 'tanh';\nconst dependencies = ['typed'];\nexport const createTanh =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed\n}) => {\n  /**\n   * Calculate the hyperbolic tangent of a value,\n   * defined as `tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.tanh(x)\n   *\n   * Examples:\n   *\n   *    // tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)\n   *    math.tanh(0.5)                   // returns 0.46211715726000974\n   *    math.sinh(0.5) / math.cosh(0.5)  // returns 0.46211715726000974\n   *    1 / math.coth(0.5)               // returns 0.46211715726000974\n   *\n   * See also:\n   *\n   *    sinh, cosh, coth\n   *\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic tangent of x\n   */\n  const tanh = typed('tanh', {\n    'number': _tanh,\n    'Complex': function (x) {\n      return x.tanh();\n    },\n    'BigNumber': function (x) {\n      return x.tanh();\n    },\n    'Unit': function (x) {\n      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function tanh is no angle');\n      }\n\n      return tanh(x.value);\n    },\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since tanh(0) = 0\n      return deepMap(x, tanh, true);\n    }\n  });\n  return tanh;\n});","map":null,"metadata":{},"sourceType":"module"}