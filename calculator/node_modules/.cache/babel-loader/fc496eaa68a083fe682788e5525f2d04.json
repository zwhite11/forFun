{"ast":null,"code":"import { factory } from '../../utils/factory';\nconst name = 'hasNumericValue';\nconst dependencies = ['typed', 'isNumeric'];\nexport const createHasNumericValue =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  isNumeric\n}) => {\n  /**\n   * Test whether a value is an numeric value.\n   *\n   * In case of a string, true is returned if the string contains a numeric value.\n   *\n   * Syntax:\n   *\n   *     math.hasNumericValue(x)\n   *\n   * Examples:\n   *\n   *    math.hasNumericValue(2)                     // returns true\n   *    math.hasNumericValue('2')                   // returns true\n   *    math.isNumeric('2')                         // returns false\n   *    math.hasNumericValue(0)                     // returns true\n   *    math.hasNumericValue(math.bignumber(500))   // returns true\n   *    math.hasNumericValue(math.fraction(4))      // returns true\n   *    math.hasNumericValue(math.complex('2-4i')   // returns false\n   *    math.hasNumericValue([2.3, 'foo', false])   // returns [true, false, true]\n   *\n   * See also:\n   *\n   *    isZero, isPositive, isNegative, isInteger, isNumeric\n   *\n   * @param {*} x       Value to be tested\n   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,\n   *                    `Fraction`, `Boolean`, or a `String` containing number. Returns false for other types.\n   *                    Throws an error in case of unknown types.\n   */\n  return typed(name, {\n    'string': function (x) {\n      return x.trim().length > 0 && !isNaN(Number(x));\n    },\n    'any': function (x) {\n      return isNumeric(x);\n    }\n  });\n});","map":null,"metadata":{},"sourceType":"module"}