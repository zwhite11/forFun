{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { signNumber } from '../../plain/number';\nconst name = 'sign';\nconst dependencies = ['typed', 'BigNumber', 'Fraction'];\nexport const createSign =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  BigNumber,\n  Fraction\n}) => {\n  /**\n   * Compute the sign of a value. The sign of a value x is:\n   *\n   * -  1 when x > 0\n   * - -1 when x < 0\n   * -  0 when x == 0\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sign(x)\n   *\n   * Examples:\n   *\n   *    math.sign(3.5)               // returns 1\n   *    math.sign(-4.2)              // returns -1\n   *    math.sign(0)                 // returns 0\n   *\n   *    math.sign([3, 5, -2, 0, 2])  // returns [1, 1, -1, 0, 1]\n   *\n   * See also:\n   *\n   *    abs\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n   *            The number for which to determine the sign\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e\n   *            The sign of `x`\n   */\n  const sign = typed(name, {\n    'number': signNumber,\n    'Complex': function (x) {\n      return x.sign();\n    },\n    'BigNumber': function (x) {\n      return new BigNumber(x.cmp(0));\n    },\n    'Fraction': function (x) {\n      return new Fraction(x.s, 1);\n    },\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since sign(0) = 0\n      return deepMap(x, sign, true);\n    },\n    'Unit': function (x) {\n      return sign(x.value);\n    }\n  });\n  return sign;\n});","map":null,"metadata":{},"sourceType":"module"}