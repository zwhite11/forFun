{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { asinhNumber } from '../../plain/number';\nconst name = 'asinh';\nconst dependencies = ['typed'];\nexport const createAsinh =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed\n}) => {\n  /**\n   * Calculate the hyperbolic arcsine of a value,\n   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.asinh(x)\n   *\n   * Examples:\n   *\n   *    math.asinh(0.5)       // returns 0.48121182505960347\n   *\n   * See also:\n   *\n   *    acosh, atanh\n   *\n   * @param {number | Complex | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Hyperbolic arcsine of x\n   */\n  const asinh = typed('asinh', {\n    'number': asinhNumber,\n    'Complex': function (x) {\n      return x.asinh();\n    },\n    'BigNumber': function (x) {\n      return x.asinh();\n    },\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since asinh(0) = 0\n      return deepMap(x, asinh, true);\n    }\n  });\n  return asinh;\n});","map":null,"metadata":{},"sourceType":"module"}