{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { DimensionError } from '../../error/DimensionError';\nimport { createAlgorithm01 } from '../../type/matrix/utils/algorithm01';\nimport { createAlgorithm03 } from '../../type/matrix/utils/algorithm03';\nimport { createAlgorithm05 } from '../../type/matrix/utils/algorithm05';\nimport { createAlgorithm10 } from '../../type/matrix/utils/algorithm10';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nconst name = 'subtract';\nconst dependencies = ['typed', 'matrix', 'equalScalar', 'addScalar', 'unaryMinus', 'DenseMatrix'];\nexport const createSubtract =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  matrix,\n  equalScalar,\n  addScalar,\n  unaryMinus,\n  DenseMatrix\n}) => {\n  // TODO: split function subtract in two: subtract and subtractScalar\n  const algorithm01 = createAlgorithm01({\n    typed\n  });\n  const algorithm03 = createAlgorithm03({\n    typed\n  });\n  const algorithm05 = createAlgorithm05({\n    typed,\n    equalScalar\n  });\n  const algorithm10 = createAlgorithm10({\n    typed,\n    DenseMatrix\n  });\n  const algorithm13 = createAlgorithm13({\n    typed\n  });\n  const algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Subtract two values, `x - y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.subtract(x, y)\n   *\n   * Examples:\n   *\n   *    math.subtract(5.3, 2)        // returns number 3.3\n   *\n   *    const a = math.complex(2, 3)\n   *    const b = math.complex(4, 1)\n   *    math.subtract(a, b)          // returns Complex -2 + 2i\n   *\n   *    math.subtract([5, 7, 4], 4)  // returns Array [1, 3, 0]\n   *\n   *    const c = math.unit('2.1 km')\n   *    const d = math.unit('500m')\n   *    math.subtract(c, d)          // returns Unit 1.6 km\n   *\n   * See also:\n   *\n   *    add\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x\n   *            Initial value\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y\n   *            Value to subtract from `x`\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}\n   *            Subtraction of `x` and `y`\n   */\n\n  const subtract = typed(name, {\n    'number, number': function (x, y) {\n      return x - y;\n    },\n    'Complex, Complex': function (x, y) {\n      return x.sub(y);\n    },\n    'BigNumber, BigNumber': function (x, y) {\n      return x.minus(y);\n    },\n    'Fraction, Fraction': function (x, y) {\n      return x.sub(y);\n    },\n    'Unit, Unit': function (x, y) {\n      if (x.value === null) {\n        throw new Error('Parameter x contains a unit with undefined value');\n      }\n\n      if (y.value === null) {\n        throw new Error('Parameter y contains a unit with undefined value');\n      }\n\n      if (!x.equalBase(y)) {\n        throw new Error('Units do not match');\n      }\n\n      const res = x.clone();\n      res.value = subtract(res.value, y.value);\n      res.fixPrefix = false;\n      return res;\n    },\n    'SparseMatrix, SparseMatrix': function (x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm05(x, y, subtract);\n    },\n    'SparseMatrix, DenseMatrix': function (x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm03(y, x, subtract, true);\n    },\n    'DenseMatrix, SparseMatrix': function (x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm01(x, y, subtract, false);\n    },\n    'DenseMatrix, DenseMatrix': function (x, y) {\n      checkEqualDimensions(x, y);\n      return algorithm13(x, y, subtract);\n    },\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return subtract(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return subtract(matrix(x), y);\n    },\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return subtract(x, matrix(y));\n    },\n    'SparseMatrix, any': function (x, y) {\n      return algorithm10(x, unaryMinus(y), addScalar);\n    },\n    'DenseMatrix, any': function (x, y) {\n      return algorithm14(x, y, subtract);\n    },\n    'any, SparseMatrix': function (x, y) {\n      return algorithm10(y, x, subtract, true);\n    },\n    'any, DenseMatrix': function (x, y) {\n      return algorithm14(y, x, subtract, true);\n    },\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, subtract, false).valueOf();\n    },\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, subtract, true).valueOf();\n    }\n  });\n  return subtract;\n});\n/**\n * Check whether matrix x and y have the same number of dimensions.\n * Throws a DimensionError when dimensions are not equal\n * @param {Matrix} x\n * @param {Matrix} y\n */\n\nfunction checkEqualDimensions(x, y) {\n  const xsize = x.size();\n  const ysize = y.size();\n\n  if (xsize.length !== ysize.length) {\n    throw new DimensionError(xsize.length, ysize.length);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}