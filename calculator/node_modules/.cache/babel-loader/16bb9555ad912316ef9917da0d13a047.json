{"ast":null,"code":"import { bitNotBigNumber } from '../../utils/bignumber/bitwise';\nimport { deepMap } from '../../utils/collection';\nimport { factory } from '../../utils/factory';\nimport { bitNotNumber } from '../../plain/number';\nconst name = 'bitNot';\nconst dependencies = ['typed'];\nexport const createBitNot =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed\n}) => {\n  /**\n   * Bitwise NOT value, `~x`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.bitNot(x)\n   *\n   * Examples:\n   *\n   *    math.bitNot(1)               // returns number -2\n   *\n   *    math.bitNot([2, -3, 4])      // returns Array [-3, 2, 5]\n   *\n   * See also:\n   *\n   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x Value to not\n   * @return {number | BigNumber | Array | Matrix} NOT of `x`\n   */\n  const bitNot = typed(name, {\n    'number': bitNotNumber,\n    'BigNumber': bitNotBigNumber,\n    'Array | Matrix': function (x) {\n      return deepMap(x, bitNot);\n    }\n  });\n  return bitNot;\n});","map":null,"metadata":{},"sourceType":"module"}