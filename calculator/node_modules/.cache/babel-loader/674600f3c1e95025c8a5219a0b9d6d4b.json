{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { acoshNumber } from '../../plain/number';\nconst name = 'acosh';\nconst dependencies = ['typed', 'config', 'Complex'];\nexport const createAcosh =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  config,\n  Complex\n}) => {\n  /**\n   * Calculate the hyperbolic arccos of a value,\n   * defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.acosh(x)\n   *\n   * Examples:\n   *\n   *    math.acosh(1.5)       // returns 0.9624236501192069\n   *\n   * See also:\n   *\n   *    cosh, asinh, atanh\n   *\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Hyperbolic arccosine of x\n   */\n  const acosh = typed(name, {\n    'number': function (x) {\n      if (x >= 1 || config.predictable) {\n        return acoshNumber(x);\n      }\n\n      if (x <= -1) {\n        return new Complex(Math.log(Math.sqrt(x * x - 1) - x), Math.PI);\n      }\n\n      return new Complex(x, 0).acosh();\n    },\n    'Complex': function (x) {\n      return x.acosh();\n    },\n    'BigNumber': function (x) {\n      return x.acosh();\n    },\n    'Array | Matrix': function (x) {\n      return deepMap(x, acosh);\n    }\n  });\n  return acosh;\n});","map":null,"metadata":{},"sourceType":"module"}