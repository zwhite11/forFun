{"ast":null,"code":"import { deepMap } from '../../utils/collection';\nimport { factory } from '../../utils/factory';\nimport { isNaNNumber } from '../../plain/number';\nconst name = 'isNaN';\nconst dependencies = ['typed'];\nexport const createIsNaN =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed\n}) => {\n  /**\n   * Test whether a value is NaN (not a number).\n   * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isNaN(x)\n   *\n   * Examples:\n   *\n   *    math.isNaN(3)                     // returns false\n   *    math.isNaN(NaN)                   // returns true\n   *    math.isNaN(0)                     // returns false\n   *    math.isNaN(math.bignumber(NaN))   // returns true\n   *    math.isNaN(math.bignumber(0))     // returns false\n   *    math.isNaN(math.fraction(-2, 5))  // returns false\n   *    math.isNaN('-2')                  // returns false\n   *    math.isNaN([2, 0, -3, NaN]')      // returns [false, false, false, true]\n   *\n   * See also:\n   *\n   *    isNumeric, isNegative, isPositive, isZero, isInteger\n   *\n   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested\n   * @return {boolean}  Returns true when `x` is NaN.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    'number': isNaNNumber,\n    'BigNumber': function (x) {\n      return x.isNaN();\n    },\n    'Fraction': function (x) {\n      return false;\n    },\n    'Complex': function (x) {\n      return x.isNaN();\n    },\n    'Unit': function (x) {\n      return Number.isNaN(x.value);\n    },\n    'Array | Matrix': function (x) {\n      return deepMap(x, Number.isNaN);\n    }\n  });\n});","map":null,"metadata":{},"sourceType":"module"}