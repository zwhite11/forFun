{"ast":null,"code":"import { isArray, isBigNumber, isMatrix, isNumber, isRange } from '../../utils/is';\nimport { factory } from '../../utils/factory';\nconst name = 'index';\nconst dependencies = ['Index'];\nexport const createIndexTransform =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  Index\n}) => {\n  /**\n   * Attach a transform function to math.index\n   * Adds a property transform containing the transform function.\n   *\n   * This transform creates a one-based index instead of a zero-based index\n   */\n  return function indexTransform() {\n    const args = [];\n\n    for (let i = 0, ii = arguments.length; i < ii; i++) {\n      let arg = arguments[i]; // change from one-based to zero based, and convert BigNumber to number\n\n      if (isRange(arg)) {\n        arg.start--;\n        arg.end -= arg.step > 0 ? 0 : 2;\n      } else if (arg && arg.isSet === true) {\n        arg = arg.map(function (v) {\n          return v - 1;\n        });\n      } else if (isArray(arg) || isMatrix(arg)) {\n        arg = arg.map(function (v) {\n          return v - 1;\n        });\n      } else if (isNumber(arg)) {\n        arg--;\n      } else if (isBigNumber(arg)) {\n        arg = arg.toNumber() - 1;\n      } else if (typeof arg === 'string') {// leave as is\n      } else {\n        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');\n      }\n\n      args[i] = arg;\n    }\n\n    const res = new Index();\n    Index.apply(res, args);\n    return res;\n  };\n}, {\n  isTransformFunction: true\n});","map":null,"metadata":{},"sourceType":"module"}