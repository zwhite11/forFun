{"ast":null,"code":"import { deepMap } from '../../utils/collection';\nimport { factory } from '../../utils/factory';\nconst name = 'isNumeric';\nconst dependencies = ['typed'];\nexport const createIsNumeric =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed\n}) => {\n  /**\n   * Test whether a value is an numeric value.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isNumeric(x)\n   *\n   * Examples:\n   *\n   *    math.isNumeric(2)                     // returns true\n   *    math.isNumeric('2')                   // returns true\n   *    math.hasNumericValue('2')             // returns true\n   *    math.isNumeric(0)                     // returns true\n   *    math.isNumeric(math.bignumber(500))   // returns true\n   *    math.isNumeric(math.fraction(4))      // returns true\n   *    math.isNumeric(math.complex('2-4i')   // returns false\n   *    math.isNumeric([2.3, 'foo', false])   // returns [true, false, true]\n   *\n   * See also:\n   *\n   *    isZero, isPositive, isNegative, isInteger, hasNumericValue\n   *\n   * @param {*} x       Value to be tested\n   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,\n   *                    `Fraction`, or `boolean`. Returns false for other types.\n   *                    Throws an error in case of unknown types.\n   */\n  const isNumeric = typed(name, {\n    'number | BigNumber | Fraction | boolean': function () {\n      return true;\n    },\n    'Complex | Unit | string | null | undefined | Node': function () {\n      return false;\n    },\n    'Array | Matrix': function (x) {\n      return deepMap(x, isNumeric);\n    }\n  });\n  return isNumeric;\n});","map":null,"metadata":{},"sourceType":"module"}