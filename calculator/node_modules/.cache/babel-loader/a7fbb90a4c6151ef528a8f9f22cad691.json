{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { createStd } from '../../function/statistics/std';\nimport { isBigNumber, isNumber, isCollection } from '../../utils/is';\nimport { errorTransform } from './utils/errorTransform';\nconst name = 'std';\nconst dependencies = ['typed', 'sqrt', 'variance'];\n/**\n * Attach a transform function to math.std\n * Adds a property transform containing the transform function.\n *\n * This transform changed the `dim` parameter of function std\n * from one-based to zero based\n */\n\nexport const createStdTransform =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  sqrt,\n  variance\n}) => {\n  const std = createStd({\n    typed,\n    sqrt,\n    variance\n  });\n  return typed('std', {\n    '...any': function (args) {\n      // change last argument dim from one-based to zero-based\n      if (args.length >= 2 && isCollection(args[0])) {\n        const dim = args[1];\n\n        if (isNumber(dim)) {\n          args[1] = dim - 1;\n        } else if (isBigNumber(dim)) {\n          args[1] = dim.minus(1);\n        }\n      }\n\n      try {\n        return std.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","map":null,"metadata":{},"sourceType":"module"}