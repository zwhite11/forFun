{"ast":null,"code":"const math = require('mathjs');\n\nlet currentValue = '';\nlet expression = [];\nlet result = '';\n\nclass CalcFunctions {\n  constructor() {\n    currentValue = '';\n    expression = [];\n    result = '';\n  }\n\n  getCurrentValue() {\n    return currentValue;\n  }\n\n  getExpression() {\n    return expression;\n  }\n\n  getResult() {\n    return result;\n  }\n\n  enterDigit(digit) {\n    currentValue += digit;\n  }\n\n  clearEvery() {\n    if (currentValue === '') {\n      return;\n    }\n\n    expression = [];\n    currentValue = '';\n  }\n\n  plusMinus() {\n    if (currentValue === '') {\n      return;\n    }\n\n    if (currentValue.charAt(0) === '-') {\n      currentValue = currentValue.slice(0);\n    }\n  }\n\n  add() {\n    if (currentValue === '') {\n      return;\n    }\n\n    expression.push(currentValue);\n    expression.push('+');\n    currentValue = '';\n    console.log(\"expression\", this.expression);\n  }\n\n  subtract() {\n    if (currentValue === '') {\n      return;\n    }\n\n    expression.push(currentValue);\n    expression.push('-');\n    currentValue = '';\n  }\n\n  multiply() {\n    if (currentValue === '') {\n      return;\n    }\n\n    expression.push(currentValue);\n    expression.push('*');\n    currentValue = '';\n  }\n\n  divide() {\n    if (currentValue === '') {\n      return;\n    }\n\n    expression.push(currentValue);\n    expression.push('/');\n    currentValue = '';\n  }\n\n  equals() {\n    if (currentValue === '') {\n      return;\n    }\n\n    expression.push(currentValue);\n    const joinedExpression = expression.join(' ');\n    console.log(\"expression\", joinedExpression);\n    result = math.evaluate(joinedExpression);\n    currentValue = result;\n    expression = [];\n  }\n\n}\n\nexport default CalcFunctions;","map":{"version":3,"sources":["C:\\Users\\zacsw\\Documents\\Projects\\calculator\\src\\components\\calculator\\calcFunctions.js"],"names":["math","require","currentValue","expression","result","CalcFunctions","constructor","getCurrentValue","getExpression","getResult","enterDigit","digit","clearEvery","plusMinus","charAt","slice","add","push","console","log","subtract","multiply","divide","equals","joinedExpression","join","evaluate"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AAEA,IAAIC,YAAY,GAAG,EAAnB;AACA,IAAIC,UAAU,GAAG,EAAjB;AACA,IAAIC,MAAM,GAAG,EAAb;;AAGA,MAAMC,aAAN,CAAoB;AAEhBC,EAAAA,WAAW,GAAG;AACVJ,IAAAA,YAAY,GAAG,EAAf;AACAC,IAAAA,UAAU,GAAG,EAAb;AACAC,IAAAA,MAAM,GAAG,EAAT;AACH;;AAEDG,EAAAA,eAAe,GAAG;AACd,WAAOL,YAAP;AACH;;AAEDM,EAAAA,aAAa,GAAG;AACZ,WAAOL,UAAP;AACH;;AAEDM,EAAAA,SAAS,GAAG;AACR,WAAOL,MAAP;AACH;;AAEDM,EAAAA,UAAU,CAACC,KAAD,EAAQ;AACdT,IAAAA,YAAY,IAAIS,KAAhB;AACH;;AAEDC,EAAAA,UAAU,GAAG;AACT,QAAIV,YAAY,KAAK,EAArB,EAAyB;AACrB;AACH;;AACDC,IAAAA,UAAU,GAAG,EAAb;AACAD,IAAAA,YAAY,GAAG,EAAf;AAGH;;AAEDW,EAAAA,SAAS,GAAG;AACR,QAAIX,YAAY,KAAK,EAArB,EAAyB;AACrB;AACH;;AAED,QAAIA,YAAY,CAACY,MAAb,CAAoB,CAApB,MAA2B,GAA/B,EAAoC;AAChCZ,MAAAA,YAAY,GAAGA,YAAY,CAACa,KAAb,CAAmB,CAAnB,CAAf;AACH;AACJ;;AAEDC,EAAAA,GAAG,GAAG;AACF,QAAId,YAAY,KAAK,EAArB,EAAyB;AACrB;AACH;;AAEDC,IAAAA,UAAU,CAACc,IAAX,CAAgBf,YAAhB;AACAC,IAAAA,UAAU,CAACc,IAAX,CAAgB,GAAhB;AACAf,IAAAA,YAAY,GAAG,EAAf;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B,KAAKhB,UAA/B;AACH;;AAEDiB,EAAAA,QAAQ,GAAG;AACP,QAAIlB,YAAY,KAAK,EAArB,EAAyB;AACrB;AACH;;AAEDC,IAAAA,UAAU,CAACc,IAAX,CAAgBf,YAAhB;AACAC,IAAAA,UAAU,CAACc,IAAX,CAAgB,GAAhB;AAEAf,IAAAA,YAAY,GAAG,EAAf;AACH;;AAEDmB,EAAAA,QAAQ,GAAG;AACP,QAAInB,YAAY,KAAK,EAArB,EAAyB;AACrB;AACH;;AAEDC,IAAAA,UAAU,CAACc,IAAX,CAAgBf,YAAhB;AACAC,IAAAA,UAAU,CAACc,IAAX,CAAgB,GAAhB;AACAf,IAAAA,YAAY,GAAG,EAAf;AACH;;AAEDoB,EAAAA,MAAM,GAAG;AACL,QAAIpB,YAAY,KAAK,EAArB,EAAyB;AACrB;AACH;;AAEDC,IAAAA,UAAU,CAACc,IAAX,CAAgBf,YAAhB;AACAC,IAAAA,UAAU,CAACc,IAAX,CAAgB,GAAhB;AACAf,IAAAA,YAAY,GAAG,EAAf;AAEH;;AAEDqB,EAAAA,MAAM,GAAG;AACL,QAAIrB,YAAY,KAAK,EAArB,EAAyB;AACrB;AACH;;AAEDC,IAAAA,UAAU,CAACc,IAAX,CAAgBf,YAAhB;AAEA,UAAMsB,gBAAgB,GAAGrB,UAAU,CAACsB,IAAX,CAAgB,GAAhB,CAAzB;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BK,gBAA1B;AAEApB,IAAAA,MAAM,GAAGJ,IAAI,CAAC0B,QAAL,CAAcF,gBAAd,CAAT;AACAtB,IAAAA,YAAY,GAAGE,MAAf;AACAD,IAAAA,UAAU,GAAG,EAAb;AAEH;;AArGe;;AAwGpB,eAAeE,aAAf","sourcesContent":["const math = require('mathjs');\r\n\r\nlet currentValue = '';\r\nlet expression = [];\r\nlet result = '';\r\n\r\n\r\nclass CalcFunctions {\r\n\r\n    constructor() {\r\n        currentValue = '';\r\n        expression = [];\r\n        result = '';\r\n    }\r\n\r\n    getCurrentValue() {\r\n        return currentValue;\r\n    }\r\n\r\n    getExpression() {\r\n        return expression;\r\n    }\r\n\r\n    getResult() {\r\n        return result;\r\n    }\r\n\r\n    enterDigit(digit) {\r\n        currentValue += digit;\r\n    }\r\n\r\n    clearEvery() {\r\n        if (currentValue === '') {\r\n            return;\r\n        }\r\n        expression = [];\r\n        currentValue = '';\r\n\r\n\r\n    }\r\n\r\n    plusMinus() {\r\n        if (currentValue === '') {\r\n            return;\r\n        }\r\n\r\n        if (currentValue.charAt(0) === '-') {\r\n            currentValue = currentValue.slice(0);\r\n        }\r\n    }\r\n\r\n    add() {\r\n        if (currentValue === '') {\r\n            return;\r\n        }\r\n\r\n        expression.push(currentValue);\r\n        expression.push('+');\r\n        currentValue = '';\r\n        console.log(\"expression\", this.expression)\r\n    }\r\n\r\n    subtract() {\r\n        if (currentValue === '') {\r\n            return;\r\n        }\r\n\r\n        expression.push(currentValue);\r\n        expression.push('-');\r\n\r\n        currentValue = '';\r\n    }\r\n\r\n    multiply() {\r\n        if (currentValue === '') {\r\n            return;\r\n        }\r\n\r\n        expression.push(currentValue);\r\n        expression.push('*');\r\n        currentValue = '';\r\n    }\r\n\r\n    divide() {\r\n        if (currentValue === '') {\r\n            return;\r\n        }\r\n\r\n        expression.push(currentValue);\r\n        expression.push('/');\r\n        currentValue = '';\r\n\r\n    }\r\n\r\n    equals() {\r\n        if (currentValue === '') {\r\n            return;\r\n        }\r\n\r\n        expression.push(currentValue);\r\n\r\n        const joinedExpression = expression.join(' ');\r\n        console.log(\"expression\", joinedExpression);\r\n\r\n        result = math.evaluate(joinedExpression);\r\n        currentValue = result;\r\n        expression = [];\r\n\r\n    }\r\n}\r\n\r\nexport default CalcFunctions;"]},"metadata":{},"sourceType":"module"}