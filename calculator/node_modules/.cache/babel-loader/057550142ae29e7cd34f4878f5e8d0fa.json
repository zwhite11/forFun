{"ast":null,"code":"import { factory } from '../../utils/factory'; // Source: https://en.wikipedia.org/wiki/Physical_constant\n// Universal constants\n\nexport const createSpeedOfLight =\n/* #__PURE__ */\nunitFactory('speedOfLight', '299792458', 'm s^-1');\nexport const createGravitationConstant =\n/* #__PURE__ */\nunitFactory('gravitationConstant', '6.67430e-11', 'm^3 kg^-1 s^-2');\nexport const createPlanckConstant =\n/* #__PURE__ */\nunitFactory('planckConstant', '6.62607015e-34', 'J s');\nexport const createReducedPlanckConstant =\n/* #__PURE__ */\nunitFactory('reducedPlanckConstant', '1.0545718176461565e-34', 'J s'); // Electromagnetic constants\n\nexport const createMagneticConstant =\n/* #__PURE__ */\nunitFactory('magneticConstant', '1.25663706212e-6', 'N A^-2');\nexport const createElectricConstant =\n/* #__PURE__ */\nunitFactory('electricConstant', '8.8541878128e-12', 'F m^-1');\nexport const createVacuumImpedance =\n/* #__PURE__ */\nunitFactory('vacuumImpedance', '376.730313667', 'ohm');\nexport const createCoulomb =\n/* #__PURE__ */\nunitFactory('coulomb', '8.987551792261171e9', 'N m^2 C^-2');\nexport const createElementaryCharge =\n/* #__PURE__ */\nunitFactory('elementaryCharge', '1.602176634e-19', 'C');\nexport const createBohrMagneton =\n/* #__PURE__ */\nunitFactory('bohrMagneton', '9.2740100783e-24', 'J T^-1');\nexport const createConductanceQuantum =\n/* #__PURE__ */\nunitFactory('conductanceQuantum', '7.748091729863649e-5', 'S');\nexport const createInverseConductanceQuantum =\n/* #__PURE__ */\nunitFactory('inverseConductanceQuantum', '12906.403729652257', 'ohm');\nexport const createMagneticFluxQuantum =\n/* #__PURE__ */\nunitFactory('magneticFluxQuantum', '2.0678338484619295e-15', 'Wb');\nexport const createNuclearMagneton =\n/* #__PURE__ */\nunitFactory('nuclearMagneton', '5.0507837461e-27', 'J T^-1');\nexport const createKlitzing =\n/* #__PURE__ */\nunitFactory('klitzing', '25812.807459304513', 'ohm');\nexport const createJosephson =\n/* #__PURE__ */\nunitFactory('josephson', '4.835978484169836e14 Hz V', 'Hz V^-1'); // TODO: support for Hz needed\n// Atomic and nuclear constants\n\nexport const createBohrRadius =\n/* #__PURE__ */\nunitFactory('bohrRadius', '5.29177210903e-11', 'm');\nexport const createClassicalElectronRadius =\n/* #__PURE__ */\nunitFactory('classicalElectronRadius', '2.8179403262e-15', 'm');\nexport const createElectronMass =\n/* #__PURE__ */\nunitFactory('electronMass', '9.1093837015e-31', 'kg');\nexport const createFermiCoupling =\n/* #__PURE__ */\nunitFactory('fermiCoupling', '1.1663787e-5', 'GeV^-2');\nexport const createFineStructure = numberFactory('fineStructure', 7.2973525693e-3);\nexport const createHartreeEnergy =\n/* #__PURE__ */\nunitFactory('hartreeEnergy', '4.3597447222071e-18', 'J');\nexport const createProtonMass =\n/* #__PURE__ */\nunitFactory('protonMass', '1.67262192369e-27', 'kg');\nexport const createDeuteronMass =\n/* #__PURE__ */\nunitFactory('deuteronMass', '3.3435830926e-27', 'kg');\nexport const createNeutronMass =\n/* #__PURE__ */\nunitFactory('neutronMass', '1.6749271613e-27', 'kg');\nexport const createQuantumOfCirculation =\n/* #__PURE__ */\nunitFactory('quantumOfCirculation', '3.6369475516e-4', 'm^2 s^-1');\nexport const createRydberg =\n/* #__PURE__ */\nunitFactory('rydberg', '10973731.568160', 'm^-1');\nexport const createThomsonCrossSection =\n/* #__PURE__ */\nunitFactory('thomsonCrossSection', '6.6524587321e-29', 'm^2');\nexport const createWeakMixingAngle = numberFactory('weakMixingAngle', 0.22290);\nexport const createEfimovFactor = numberFactory('efimovFactor', 22.7); // Physico-chemical constants\n\nexport const createAtomicMass =\n/* #__PURE__ */\nunitFactory('atomicMass', '1.66053906660e-27', 'kg');\nexport const createAvogadro =\n/* #__PURE__ */\nunitFactory('avogadro', '6.02214076e23', 'mol^-1');\nexport const createBoltzmann =\n/* #__PURE__ */\nunitFactory('boltzmann', '1.380649e-23', 'J K^-1');\nexport const createFaraday =\n/* #__PURE__ */\nunitFactory('faraday', '96485.33212331001', 'C mol^-1');\nexport const createFirstRadiation =\n/* #__PURE__ */\nunitFactory('firstRadiation', '3.7417718521927573e-16', 'W m^2'); // export const createSpectralRadiance = /* #__PURE__ */ unitFactory('spectralRadiance', '1.1910429723971881e-16', 'W m^2 sr^-1') // TODO spectralRadiance\n\nexport const createLoschmidt =\n/* #__PURE__ */\nunitFactory('loschmidt', '2.686780111798444e25', 'm^-3');\nexport const createGasConstant =\n/* #__PURE__ */\nunitFactory('gasConstant', '8.31446261815324', 'J K^-1 mol^-1');\nexport const createMolarPlanckConstant =\n/* #__PURE__ */\nunitFactory('molarPlanckConstant', '3.990312712893431e-10', 'J s mol^-1');\nexport const createMolarVolume =\n/* #__PURE__ */\nunitFactory('molarVolume', '0.022413969545014137', 'm^3 mol^-1');\nexport const createSackurTetrode = numberFactory('sackurTetrode', -1.16487052358);\nexport const createSecondRadiation =\n/* #__PURE__ */\nunitFactory('secondRadiation', '0.014387768775039337', 'm K');\nexport const createStefanBoltzmann =\n/* #__PURE__ */\nunitFactory('stefanBoltzmann', '5.67037441918443e-8', 'W m^-2 K^-4');\nexport const createWienDisplacement =\n/* #__PURE__ */\nunitFactory('wienDisplacement', '2.897771955e-3', 'm K'); // Adopted values\n\nexport const createMolarMass =\n/* #__PURE__ */\nunitFactory('molarMass', '0.99999999965e-3', 'kg mol^-1');\nexport const createMolarMassC12 =\n/* #__PURE__ */\nunitFactory('molarMassC12', '11.9999999958e-3', 'kg mol^-1');\nexport const createGravity =\n/* #__PURE__ */\nunitFactory('gravity', '9.80665', 'm s^-2'); // atm is defined in Unit.js\n// Natural units\n\nexport const createPlanckLength =\n/* #__PURE__ */\nunitFactory('planckLength', '1.616255e-35', 'm');\nexport const createPlanckMass =\n/* #__PURE__ */\nunitFactory('planckMass', '2.176435e-8', 'kg');\nexport const createPlanckTime =\n/* #__PURE__ */\nunitFactory('planckTime', '5.391245e-44', 's');\nexport const createPlanckCharge =\n/* #__PURE__ */\nunitFactory('planckCharge', '1.87554603778e-18', 'C');\nexport const createPlanckTemperature =\n/* #__PURE__ */\nunitFactory('planckTemperature', '1.416785e+32', 'K'); // helper function to create a factory function which creates a physical constant,\n// a Unit with either a number value or a BigNumber value depending on the configuration\n\nfunction unitFactory(name, valueStr, unitStr) {\n  const dependencies = ['config', 'Unit', 'BigNumber'];\n  return factory(name, dependencies, ({\n    config,\n    Unit,\n    BigNumber\n  }) => {\n    // Note that we can parse into number or BigNumber.\n    // We do not parse into Fractions as that doesn't make sense: we would lose precision of the values\n    // Therefore we dont use Unit.parse()\n    const value = config.number === 'BigNumber' ? new BigNumber(valueStr) : parseFloat(valueStr);\n    const unit = new Unit(value, unitStr);\n    unit.fixPrefix = true;\n    return unit;\n  });\n} // helper function to create a factory function which creates a numeric constant,\n// either a number or BigNumber depending on the configuration\n\n\nfunction numberFactory(name, value) {\n  const dependencies = ['config', 'BigNumber'];\n  return factory(name, dependencies, ({\n    config,\n    BigNumber\n  }) => {\n    return config.number === 'BigNumber' ? new BigNumber(value) : value;\n  });\n}","map":null,"metadata":{},"sourceType":"module"}