{"ast":null,"code":"import { factory } from '../utils/factory';\nimport { deepMap } from '../utils/collection';\nconst name = 'number';\nconst dependencies = ['typed'];\nexport const createNumber =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed\n}) => {\n  /**\n   * Create a number or convert a string, boolean, or unit to a number.\n   * When value is a matrix, all elements will be converted to number.\n   *\n   * Syntax:\n   *\n   *    math.number(value)\n   *    math.number(unit, valuelessUnit)\n   *\n   * Examples:\n   *\n   *    math.number(2)                         // returns number 2\n   *    math.number('7.2')                     // returns number 7.2\n   *    math.number(true)                      // returns number 1\n   *    math.number([true, false, true, true]) // returns [1, 0, 1, 1]\n   *    math.number(math.unit('52cm'), 'm')    // returns 0.52\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, matrix, string, unit\n   *\n   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted\n   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number\n   * @return {number | Array | Matrix} The created number\n   */\n  const number = typed('number', {\n    '': function () {\n      return 0;\n    },\n    'number': function (x) {\n      return x;\n    },\n    'string': function (x) {\n      if (x === 'NaN') return NaN;\n      const num = Number(x);\n\n      if (isNaN(num)) {\n        throw new SyntaxError('String \"' + x + '\" is no valid number');\n      }\n\n      return num;\n    },\n    'BigNumber': function (x) {\n      return x.toNumber();\n    },\n    'Fraction': function (x) {\n      return x.valueOf();\n    },\n    'Unit': function (x) {\n      throw new Error('Second argument with valueless unit expected');\n    },\n    'null': function (x) {\n      return 0;\n    },\n    'Unit, string | Unit': function (unit, valuelessUnit) {\n      return unit.toNumber(valuelessUnit);\n    },\n    'Array | Matrix': function (x) {\n      return deepMap(x, number);\n    }\n  });\n  return number;\n});","map":null,"metadata":{},"sourceType":"module"}