{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { acothNumber } from '../../plain/number';\nconst name = 'acoth';\nconst dependencies = ['typed', 'config', 'Complex', 'BigNumber'];\nexport const createAcoth =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  config,\n  Complex,\n  BigNumber\n}) => {\n  /**\n   * Calculate the hyperbolic arccotangent of a value,\n   * defined as `acoth(x) = atanh(1/x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.acoth(x)\n   *\n   * Examples:\n   *\n   *    math.acoth(0.5)       // returns 0.8047189562170503\n   *\n   * See also:\n   *\n   *    acsch, asech\n   *\n   * @param {number | Complex | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Hyperbolic arccotangent of x\n   */\n  const acoth = typed(name, {\n    'number': function (x) {\n      if (x >= 1 || x <= -1 || config.predictable) {\n        return acothNumber(x);\n      }\n\n      return new Complex(x, 0).acoth();\n    },\n    'Complex': function (x) {\n      return x.acoth();\n    },\n    'BigNumber': function (x) {\n      return new BigNumber(1).div(x).atanh();\n    },\n    'Array | Matrix': function (x) {\n      return deepMap(x, acoth);\n    }\n  });\n  return acoth;\n});","map":null,"metadata":{},"sourceType":"module"}