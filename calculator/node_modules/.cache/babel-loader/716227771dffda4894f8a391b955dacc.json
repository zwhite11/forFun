{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nconst name = 'to';\nconst dependencies = ['typed', 'matrix'];\nexport const createTo =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  matrix\n}) => {\n  const algorithm13 = createAlgorithm13({\n    typed\n  });\n  const algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Change the unit of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.to(x, unit)\n   *\n   * Examples:\n   *\n   *    math.to(math.unit('2 inch'), 'cm')                   // returns Unit 5.08 cm\n   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'))  // returns Unit 5.08 cm\n   *    math.to(math.unit(16, 'bytes'), 'bits')              // returns Unit 128 bits\n   *\n   * See also:\n   *\n   *    unit\n   *\n   * @param {Unit | Array | Matrix} x     The unit to be converted.\n   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like \"cm\"\n   *                                      or a unit without value.\n   * @return {Unit | Array | Matrix} value with changed, fixed unit.\n   */\n\n  const to = typed(name, {\n    'Unit, Unit | string': function (x, unit) {\n      return x.to(unit);\n    },\n    'Matrix, Matrix': function (x, y) {\n      // SparseMatrix does not support Units\n      return algorithm13(x, y, to);\n    },\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return to(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return to(matrix(x), y);\n    },\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return to(x, matrix(y));\n    },\n    'Matrix, any': function (x, y) {\n      // SparseMatrix does not support Units\n      return algorithm14(x, y, to, false);\n    },\n    'any, Matrix': function (x, y) {\n      // SparseMatrix does not support Units\n      return algorithm14(y, x, to, true);\n    },\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, to, false).valueOf();\n    },\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, to, true).valueOf();\n    }\n  });\n  return to;\n});","map":null,"metadata":{},"sourceType":"module"}