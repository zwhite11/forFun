{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { createAlgorithm01 } from '../../type/matrix/utils/algorithm01';\nimport { createAlgorithm04 } from '../../type/matrix/utils/algorithm04';\nimport { createAlgorithm10 } from '../../type/matrix/utils/algorithm10';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { gcdNumber } from '../../plain/number';\nconst name = 'gcd';\nconst dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];\nexport const createGcd =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  matrix,\n  equalScalar,\n  BigNumber,\n  DenseMatrix\n}) => {\n  const algorithm01 = createAlgorithm01({\n    typed\n  });\n  const algorithm04 = createAlgorithm04({\n    typed,\n    equalScalar\n  });\n  const algorithm10 = createAlgorithm10({\n    typed,\n    DenseMatrix\n  });\n  const algorithm13 = createAlgorithm13({\n    typed\n  });\n  const algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Calculate the greatest common divisor for two or more values or arrays.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.gcd(a, b)\n   *    math.gcd(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.gcd(8, 12)              // returns 4\n   *    math.gcd(-4, 6)              // returns 2\n   *    math.gcd(25, 15, -10)        // returns 5\n   *\n   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]\n   *\n   * See also:\n   *\n   *    lcm, xgcd\n   *\n   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor\n   */\n\n  const gcd = typed(name, {\n    'number, number': gcdNumber,\n    'BigNumber, BigNumber': _gcdBigNumber,\n    'Fraction, Fraction': function (x, y) {\n      return x.gcd(y);\n    },\n    'SparseMatrix, SparseMatrix': function (x, y) {\n      return algorithm04(x, y, gcd);\n    },\n    'SparseMatrix, DenseMatrix': function (x, y) {\n      return algorithm01(y, x, gcd, true);\n    },\n    'DenseMatrix, SparseMatrix': function (x, y) {\n      return algorithm01(x, y, gcd, false);\n    },\n    'DenseMatrix, DenseMatrix': function (x, y) {\n      return algorithm13(x, y, gcd);\n    },\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return gcd(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return gcd(matrix(x), y);\n    },\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return gcd(x, matrix(y));\n    },\n    'SparseMatrix, number | BigNumber': function (x, y) {\n      return algorithm10(x, y, gcd, false);\n    },\n    'DenseMatrix, number | BigNumber': function (x, y) {\n      return algorithm14(x, y, gcd, false);\n    },\n    'number | BigNumber, SparseMatrix': function (x, y) {\n      return algorithm10(y, x, gcd, true);\n    },\n    'number | BigNumber, DenseMatrix': function (x, y) {\n      return algorithm14(y, x, gcd, true);\n    },\n    'Array, number | BigNumber': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, gcd, false).valueOf();\n    },\n    'number | BigNumber, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, gcd, true).valueOf();\n    },\n    // TODO: need a smarter notation here\n    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function (a, b, args) {\n      let res = gcd(a, b);\n\n      for (let i = 0; i < args.length; i++) {\n        res = gcd(res, args[i]);\n      }\n\n      return res;\n    }\n  });\n  return gcd;\n  /**\n   * Calculate gcd for BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns greatest common denominator of a and b\n   * @private\n   */\n\n  function _gcdBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function gcd must be integer numbers');\n    } // https://en.wikipedia.org/wiki/Euclidean_algorithm\n\n\n    const zero = new BigNumber(0);\n\n    while (!b.isZero()) {\n      const r = a.mod(b);\n      a = b;\n      b = r;\n    }\n\n    return a.lt(zero) ? a.neg() : a;\n  }\n});","map":null,"metadata":{},"sourceType":"module"}