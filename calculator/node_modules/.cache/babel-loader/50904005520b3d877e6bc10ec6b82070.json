{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { createAlgorithm02 } from '../../type/matrix/utils/algorithm02';\nimport { createAlgorithm03 } from '../../type/matrix/utils/algorithm03';\nimport { createAlgorithm05 } from '../../type/matrix/utils/algorithm05';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { modNumber } from '../../plain/number';\nconst name = 'mod';\nconst dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];\nexport const createMod =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  matrix,\n  equalScalar,\n  DenseMatrix\n}) => {\n  const algorithm02 = createAlgorithm02({\n    typed,\n    equalScalar\n  });\n  const algorithm03 = createAlgorithm03({\n    typed\n  });\n  const algorithm05 = createAlgorithm05({\n    typed,\n    equalScalar\n  });\n  const algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  const algorithm12 = createAlgorithm12({\n    typed,\n    DenseMatrix\n  });\n  const algorithm13 = createAlgorithm13({\n    typed\n  });\n  const algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Calculates the modulus, the remainder of an integer division.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * The modulus is defined as:\n   *\n   *     x - y * floor(x / y)\n   *\n   * See https://en.wikipedia.org/wiki/Modulo_operation.\n   *\n   * Syntax:\n   *\n   *    math.mod(x, y)\n   *\n   * Examples:\n   *\n   *    math.mod(8, 3)                // returns 2\n   *    math.mod(11, 2)               // returns 1\n   *\n   *    function isOdd(x) {\n   *      return math.mod(x, 2) != 0\n   *    }\n   *\n   *    isOdd(2)                      // returns false\n   *    isOdd(3)                      // returns true\n   *\n   * See also:\n   *\n   *    divide\n   *\n   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend\n   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.\n   */\n\n  const mod = typed(name, {\n    'number, number': modNumber,\n    'BigNumber, BigNumber': function (x, y) {\n      return y.isZero() ? x : x.mod(y);\n    },\n    'Fraction, Fraction': function (x, y) {\n      return x.mod(y);\n    },\n    'SparseMatrix, SparseMatrix': function (x, y) {\n      return algorithm05(x, y, mod, false);\n    },\n    'SparseMatrix, DenseMatrix': function (x, y) {\n      return algorithm02(y, x, mod, true);\n    },\n    'DenseMatrix, SparseMatrix': function (x, y) {\n      return algorithm03(x, y, mod, false);\n    },\n    'DenseMatrix, DenseMatrix': function (x, y) {\n      return algorithm13(x, y, mod);\n    },\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return mod(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return mod(matrix(x), y);\n    },\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return mod(x, matrix(y));\n    },\n    'SparseMatrix, any': function (x, y) {\n      return algorithm11(x, y, mod, false);\n    },\n    'DenseMatrix, any': function (x, y) {\n      return algorithm14(x, y, mod, false);\n    },\n    'any, SparseMatrix': function (x, y) {\n      return algorithm12(y, x, mod, true);\n    },\n    'any, DenseMatrix': function (x, y) {\n      return algorithm14(y, x, mod, true);\n    },\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, mod, false).valueOf();\n    },\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, mod, true).valueOf();\n    }\n  });\n  return mod;\n});","map":null,"metadata":{},"sourceType":"module"}