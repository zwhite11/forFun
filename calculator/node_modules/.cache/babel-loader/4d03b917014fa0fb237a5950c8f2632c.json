{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nconst name = 'fix';\nconst dependencies = ['typed', 'Complex', 'ceil', 'floor'];\nexport const createFix =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  Complex,\n  ceil,\n  floor\n}) => {\n  /**\n   * Round a value towards zero.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.fix(x)\n   *\n   * Examples:\n   *\n   *    math.fix(3.2)                // returns number 3\n   *    math.fix(3.8)                // returns number 3\n   *    math.fix(-4.2)               // returns number -4\n   *    math.fix(-4.7)               // returns number -4\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.fix(c)                  // returns Complex 3 - 2i\n   *\n   *    math.fix([3.2, 3.8, -4.7])   // returns Array [3, 3, -4]\n   *\n   * See also:\n   *\n   *    ceil, floor, round\n   *\n   * @param {number | BigNumber | Fraction | Complex | Array | Matrix} x Number to be rounded\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}            Rounded value\n   */\n  const fix = typed('fix', {\n    'number': function (x) {\n      return x > 0 ? floor(x) : ceil(x);\n    },\n    'Complex': function (x) {\n      return new Complex(x.re > 0 ? Math.floor(x.re) : Math.ceil(x.re), x.im > 0 ? Math.floor(x.im) : Math.ceil(x.im));\n    },\n    'BigNumber': function (x) {\n      return x.isNegative() ? ceil(x) : floor(x);\n    },\n    'Fraction': function (x) {\n      return x.s < 0 ? x.ceil() : x.floor();\n    },\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since fix(0) = 0\n      return deepMap(x, fix, true);\n    }\n  });\n  return fix;\n});","map":null,"metadata":{},"sourceType":"module"}