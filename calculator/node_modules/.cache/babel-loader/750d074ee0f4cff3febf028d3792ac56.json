{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { sinhNumber } from '../../plain/number';\nconst name = 'sinh';\nconst dependencies = ['typed'];\nexport const createSinh =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed\n}) => {\n  /**\n   * Calculate the hyperbolic sine of a value,\n   * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.sinh(x)\n   *\n   * Examples:\n   *\n   *    math.sinh(0.5)       // returns number 0.5210953054937474\n   *\n   * See also:\n   *\n   *    cosh, tanh\n   *\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic sine of x\n   */\n  const sinh = typed(name, {\n    'number': sinhNumber,\n    'Complex': function (x) {\n      return x.sinh();\n    },\n    'BigNumber': function (x) {\n      return x.sinh();\n    },\n    'Unit': function (x) {\n      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function sinh is no angle');\n      }\n\n      return sinh(x.value);\n    },\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since sinh(0) = 0\n      return deepMap(x, sinh, true);\n    }\n  });\n  return sinh;\n});","map":null,"metadata":{},"sourceType":"module"}