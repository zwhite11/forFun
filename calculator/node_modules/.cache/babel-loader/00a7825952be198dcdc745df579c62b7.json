{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { typeOf } from '../../utils/is';\nconst name = 'divideScalar';\nconst dependencies = ['typed', 'numeric'];\nexport const createDivideScalar =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  numeric\n}) => {\n  /**\n   * Divide two scalar values, `x / y`.\n   * This function is meant for internal use: it is used by the public functions\n   * `divide` and `inv`.\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator\n   * @param  {number | BigNumber | Fraction | Complex} y          Denominator\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Quotient, `x / y`\n   * @private\n   */\n  const divideScalar = typed(name, {\n    'number, number': function (x, y) {\n      return x / y;\n    },\n    'Complex, Complex': function (x, y) {\n      return x.div(y);\n    },\n    'BigNumber, BigNumber': function (x, y) {\n      return x.div(y);\n    },\n    'Fraction, Fraction': function (x, y) {\n      return x.div(y);\n    },\n    'Unit, number | Fraction | BigNumber': function (x, y) {\n      const res = x.clone(); // TODO: move the divide function to Unit.js, it uses internals of Unit\n\n      const one = numeric(1, typeOf(y));\n      res.value = divideScalar(res.value === null ? res._normalize(one) : res.value, y);\n      return res;\n    },\n    'number | Fraction | BigNumber, Unit': function (x, y) {\n      let res = y.clone();\n      res = res.pow(-1); // TODO: move the divide function to Unit.js, it uses internals of Unit\n\n      const one = numeric(1, typeOf(x));\n      res.value = divideScalar(x, y.value === null ? y._normalize(one) : y.value);\n      return res;\n    },\n    'Unit, Unit': function (x, y) {\n      return x.divide(y);\n    }\n  });\n  return divideScalar;\n});","map":null,"metadata":{},"sourceType":"module"}