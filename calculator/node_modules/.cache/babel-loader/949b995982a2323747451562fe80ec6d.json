{"ast":null,"code":"const math = require(\"mathjs\");\n\nlet currentValue = \"\";\nlet expression = [];\nlet result = \"\";\n\nclass CalcFunctions {\n  constructor() {\n    currentValue = \"\";\n    expression = [];\n    result = \"\";\n  }\n\n  getCurrentValue() {\n    return currentValue;\n  }\n\n  getExpression() {\n    return expression;\n  }\n\n  getResult() {\n    return result;\n  }\n\n  enterDigit(digit) {\n    currentValue += digit;\n  }\n\n  clearEvery() {\n    if (currentValue === \"\") {\n      return;\n    }\n\n    expression = [];\n    currentValue = \"\";\n  }\n\n  percentage() {\n    if (currentValue === \"\") {\n      return;\n    }\n\n    currentValue = math.evaluate(currentValue + \" / 100\");\n  }\n\n  decimal() {\n    if (currentValue === \"\") {\n      currentValue = \"0.\";\n      return;\n    }\n\n    let lastChar = currentValue.charAt(currentValue.length - 1);\n\n    if (lastChar !== \".\") {\n      currentValue = currentValue + \".\";\n    }\n  }\n\n  plusMinus() {\n    if (currentValue === \"\") {\n      return;\n    }\n\n    if (currentValue.charAt(0) === \"-\") {\n      currentValue = currentValue.slice(1);\n    } else {\n      currentValue = \"-\" + currentValue;\n    }\n  }\n\n  add() {\n    if (currentValue === \"\") {\n      return;\n    }\n\n    expression.push(currentValue);\n    expression.push(\"+\");\n    currentValue = \"\";\n  }\n\n  subtract() {\n    if (currentValue === \"\") {\n      return;\n    }\n\n    expression.push(currentValue);\n    expression.push(\"-\");\n    currentValue = \"\";\n  }\n\n  multiply() {\n    if (currentValue === \"\") {\n      return;\n    }\n\n    expression.push(currentValue);\n    expression.push(\"*\");\n    currentValue = \"\";\n  }\n\n  divide() {\n    if (currentValue === \"\") {\n      return;\n    }\n\n    expression.push(currentValue);\n    expression.push(\"/\");\n    currentValue = \"\";\n  }\n\n  equals() {\n    if (currentValue === \"\") {\n      return;\n    }\n\n    expression.push(currentValue);\n    const joinedExpression = expression.join(\" \");\n    result = math.evaluate(joinedExpression).toString();\n    currentValue = result;\n    expression = [];\n  }\n\n}\n\nexport default CalcFunctions;","map":{"version":3,"sources":["C:\\Users\\zacsw\\Documents\\Projects - NoGit\\calculator\\src\\components\\calculator\\calcFunctions.js"],"names":["math","require","currentValue","expression","result","CalcFunctions","constructor","getCurrentValue","getExpression","getResult","enterDigit","digit","clearEvery","percentage","evaluate","decimal","lastChar","charAt","length","plusMinus","slice","add","push","subtract","multiply","divide","equals","joinedExpression","join","toString"],"mappings":"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","sourcesContent":["const math = require(\"mathjs\");\r\n\r\nlet currentValue = \"\";\r\nlet expression = [];\r\nlet result = \"\";\r\n\r\nclass CalcFunctions {\r\n  constructor() {\r\n    currentValue = \"\";\r\n    expression = [];\r\n    result = \"\";\r\n  }\r\n\r\n  getCurrentValue() {\r\n    return currentValue;\r\n  }\r\n\r\n  getExpression() {\r\n    return expression;\r\n  }\r\n\r\n  getResult() {\r\n    return result;\r\n  }\r\n\r\n  enterDigit(digit) {\r\n    currentValue += digit;\r\n  }\r\n\r\n  clearEvery() {\r\n    if (currentValue === \"\") {\r\n      return;\r\n    }\r\n    expression = [];\r\n    currentValue = \"\";\r\n  }\r\n\r\n  percentage() {\r\n    if (currentValue === \"\") {\r\n      return;\r\n    }\r\n\r\n    currentValue = math.evaluate(currentValue + \" / 100\");\r\n  }\r\n\r\n  decimal() {\r\n    if (currentValue === \"\") {\r\n      currentValue = \"0.\";\r\n      return;\r\n    }\r\n\r\n    let lastChar = currentValue.charAt(currentValue.length - 1);\r\n    if (lastChar !== \".\") {\r\n      currentValue = currentValue + \".\";\r\n    }\r\n  }\r\n\r\n  plusMinus() {\r\n    if (currentValue === \"\") {\r\n      return;\r\n    }\r\n\r\n    if (currentValue.charAt(0) === \"-\") {\r\n      currentValue = currentValue.slice(1);\r\n    } else {\r\n      currentValue = \"-\" + currentValue;\r\n    }\r\n  }\r\n\r\n  add() {\r\n    if (currentValue === \"\") {\r\n      return;\r\n    }\r\n\r\n    expression.push(currentValue);\r\n    expression.push(\"+\");\r\n    currentValue = \"\";\r\n  }\r\n\r\n  subtract() {\r\n    if (currentValue === \"\") {\r\n      return;\r\n    }\r\n\r\n    expression.push(currentValue);\r\n    expression.push(\"-\");\r\n\r\n    currentValue = \"\";\r\n  }\r\n\r\n  multiply() {\r\n    if (currentValue === \"\") {\r\n      return;\r\n    }\r\n\r\n    expression.push(currentValue);\r\n    expression.push(\"*\");\r\n    currentValue = \"\";\r\n  }\r\n\r\n  divide() {\r\n    if (currentValue === \"\") {\r\n      return;\r\n    }\r\n\r\n    expression.push(currentValue);\r\n    expression.push(\"/\");\r\n    currentValue = \"\";\r\n  }\r\n\r\n  equals() {\r\n    if (currentValue === \"\") {\r\n      return;\r\n    }\r\n\r\n    expression.push(currentValue);\r\n\r\n    const joinedExpression = expression.join(\" \");\r\n\r\n    result = math.evaluate(joinedExpression).toString();\r\n    currentValue = result;\r\n    expression = [];\r\n  }\r\n}\r\n\r\nexport default CalcFunctions;\r\n"]},"metadata":{},"sourceType":"module"}