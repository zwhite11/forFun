{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { squareNumber } from '../../plain/number';\nconst name = 'square';\nconst dependencies = ['typed'];\nexport const createSquare =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed\n}) => {\n  /**\n   * Compute the square of a value, `x * x`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.square(x)\n   *\n   * Examples:\n   *\n   *    math.square(2)           // returns number 4\n   *    math.square(3)           // returns number 9\n   *    math.pow(3, 2)           // returns number 9\n   *    math.multiply(3, 3)      // returns number 9\n   *\n   *    math.square([1, 2, 3, 4])  // returns Array [1, 4, 9, 16]\n   *\n   * See also:\n   *\n   *    multiply, cube, sqrt, pow\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n   *            Number for which to calculate the square\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}\n   *            Squared value\n   */\n  const square = typed(name, {\n    'number': squareNumber,\n    'Complex': function (x) {\n      return x.mul(x);\n    },\n    'BigNumber': function (x) {\n      return x.times(x);\n    },\n    'Fraction': function (x) {\n      return x.mul(x);\n    },\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since square(0) = 0\n      return deepMap(x, square, true);\n    },\n    'Unit': function (x) {\n      return x.pow(2);\n    }\n  });\n  return square;\n});","map":null,"metadata":{},"sourceType":"module"}