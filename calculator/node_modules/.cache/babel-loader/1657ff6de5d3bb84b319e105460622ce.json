{"ast":null,"code":"import { factory } from '../../../utils/factory';\nimport { deepMap } from '../../../utils/collection';\nconst name = 'bignumber';\nconst dependencies = ['typed', 'BigNumber'];\nexport const createBignumber =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  BigNumber\n}) => {\n  /**\n   * Create a BigNumber, which can store numbers with arbitrary precision.\n   * When a matrix is provided, all elements will be converted to BigNumber.\n   *\n   * Syntax:\n   *\n   *    math.bignumber(x)\n   *\n   * Examples:\n   *\n   *    0.1 + 0.2                                  // returns number 0.30000000000000004\n   *    math.bignumber(0.1) + math.bignumber(0.2)  // returns BigNumber 0.3\n   *\n   *\n   *    7.2e500                                    // returns number Infinity\n   *    math.bignumber('7.2e500')                  // returns BigNumber 7.2e500\n   *\n   * See also:\n   *\n   *    boolean, complex, index, matrix, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,\n   *                                                    0 by default.\n   * @returns {BigNumber} The created bignumber\n   */\n  const bignumber = typed('bignumber', {\n    '': function () {\n      return new BigNumber(0);\n    },\n    'number': function (x) {\n      // convert to string to prevent errors in case of >15 digits\n      return new BigNumber(x + '');\n    },\n    'string': function (x) {\n      return new BigNumber(x);\n    },\n    'BigNumber': function (x) {\n      // we assume a BigNumber is immutable\n      return x;\n    },\n    'Fraction': function (x) {\n      return new BigNumber(x.n).div(x.d).times(x.s);\n    },\n    'null': function (x) {\n      return new BigNumber(0);\n    },\n    'Array | Matrix': function (x) {\n      return deepMap(x, bignumber);\n    }\n  });\n  return bignumber;\n});","map":null,"metadata":{},"sourceType":"module"}