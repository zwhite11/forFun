{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { expm1Number } from '../../plain/number';\nconst name = 'expm1';\nconst dependencies = ['typed', 'Complex'];\nexport const createExpm1 =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  Complex\n}) => {\n  /**\n   * Calculate the value of subtracting 1 from the exponential value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.expm1(x)\n   *\n   * Examples:\n   *\n   *    math.expm1(2)                      // returns number 6.38905609893065\n   *    math.pow(math.e, 2) - 1            // returns number 6.3890560989306495\n   *    math.log(math.expm1(2) + 1)        // returns number 2\n   *\n   *    math.expm1([1, 2, 3])\n   *    // returns Array [\n   *    //   1.718281828459045,\n   *    //   6.3890560989306495,\n   *    //   19.085536923187668\n   *    // ]\n   *\n   * See also:\n   *\n   *    exp, log, pow\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to apply expm1\n   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`\n   */\n  const expm1 = typed(name, {\n    'number': expm1Number,\n    'Complex': function (x) {\n      const r = Math.exp(x.re);\n      return new Complex(r * Math.cos(x.im) - 1, r * Math.sin(x.im));\n    },\n    'BigNumber': function (x) {\n      return x.exp().minus(1);\n    },\n    'Array | Matrix': function (x) {\n      return deepMap(x, expm1);\n    }\n  });\n  return expm1;\n});","map":null,"metadata":{},"sourceType":"module"}