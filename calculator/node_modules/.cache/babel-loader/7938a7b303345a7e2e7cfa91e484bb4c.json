{"ast":null,"code":"import { deepMap } from '../../utils/collection';\nimport { factory } from '../../utils/factory';\nimport { isZeroNumber } from '../../plain/number';\nconst name = 'isZero';\nconst dependencies = ['typed'];\nexport const createIsZero =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed\n}) => {\n  /**\n   * Test whether a value is zero.\n   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,\n   * `Complex`, and `Unit`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isZero(x)\n   *\n   * Examples:\n   *\n   *    math.isZero(0)                     // returns true\n   *    math.isZero(2)                     // returns false\n   *    math.isZero(0.5)                   // returns false\n   *    math.isZero(math.bignumber(0))     // returns true\n   *    math.isZero(math.fraction(0))      // returns true\n   *    math.isZero(math.fraction(1,3))    // returns false\n   *    math.isZero(math.complex('2 - 4i') // returns false\n   *    math.isZero(math.complex('0i')     // returns true\n   *    math.isZero('0')                   // returns true\n   *    math.isZero('2')                   // returns false\n   *    math.isZero([2, 0, -3]')           // returns [false, true, false]\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isNegative, isInteger\n   *\n   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested\n   * @return {boolean}  Returns true when `x` is zero.\n   *                    Throws an error in case of an unknown data type.\n   */\n  const isZero = typed(name, {\n    'number': isZeroNumber,\n    'BigNumber': function (x) {\n      return x.isZero();\n    },\n    'Complex': function (x) {\n      return x.re === 0 && x.im === 0;\n    },\n    'Fraction': function (x) {\n      return x.d === 1 && x.n === 0;\n    },\n    'Unit': function (x) {\n      return isZero(x.value);\n    },\n    'Array | Matrix': function (x) {\n      return deepMap(x, isZero);\n    }\n  });\n  return isZero;\n});","map":null,"metadata":{},"sourceType":"module"}