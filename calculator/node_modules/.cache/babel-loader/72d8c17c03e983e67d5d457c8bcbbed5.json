{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { multiplyNumber } from '../../plain/number';\nconst name = 'multiplyScalar';\nconst dependencies = ['typed'];\nexport const createMultiplyScalar =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed\n}) => {\n  /**\n   * Multiply two scalar values, `x * y`.\n   * This function is meant for internal use: it is used by the public function\n   * `multiply`\n   *\n   * This function does not support collections (Array or Matrix).\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply\n   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply\n   * @return {number | BigNumber | Fraction | Complex | Unit}     Multiplication of `x` and `y`\n   * @private\n   */\n  const multiplyScalar = typed('multiplyScalar', {\n    'number, number': multiplyNumber,\n    'Complex, Complex': function (x, y) {\n      return x.mul(y);\n    },\n    'BigNumber, BigNumber': function (x, y) {\n      return x.times(y);\n    },\n    'Fraction, Fraction': function (x, y) {\n      return x.mul(y);\n    },\n    'number | Fraction | BigNumber | Complex, Unit': function (x, y) {\n      const res = y.clone();\n      res.value = res.value === null ? res._normalize(x) : multiplyScalar(res.value, x);\n      return res;\n    },\n    'Unit, number | Fraction | BigNumber | Complex': function (x, y) {\n      const res = x.clone();\n      res.value = res.value === null ? res._normalize(y) : multiplyScalar(res.value, y);\n      return res;\n    },\n    'Unit, Unit': function (x, y) {\n      return x.multiply(y);\n    }\n  });\n  return multiplyScalar;\n});","map":null,"metadata":{},"sourceType":"module"}