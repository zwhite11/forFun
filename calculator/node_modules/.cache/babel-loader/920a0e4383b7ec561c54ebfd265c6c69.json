{"ast":null,"code":"import { factory } from '../../utils/factory';\nconst name = 'ctranspose';\nconst dependencies = ['typed', 'transpose', 'conj'];\nexport const createCtranspose =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  transpose,\n  conj\n}) => {\n  /**\n   * Transpose and complex conjugate a matrix. All values of the matrix are\n   * reflected over its main diagonal and then the complex conjugate is\n   * taken. This is equivalent to complex conjugation for scalars and\n   * vectors.\n   *\n   * Syntax:\n   *\n   *     math.ctranspose(x)\n   *\n   * Examples:\n   *\n   *     const A = [[1, 2, 3], [4, 5, math.complex(6,7)]]\n   *     math.ctranspose(A)               // returns [[1, 4], [2, 5], [3, {re:6,im:7}]]\n   *\n   * See also:\n   *\n   *     transpose, diag, inv, subset, squeeze\n   *\n   * @param {Array | Matrix} x  Matrix to be ctransposed\n   * @return {Array | Matrix}   The ctransposed matrix\n   */\n  return typed(name, {\n    'any': function (x) {\n      return conj(transpose(x));\n    }\n  });\n});","map":null,"metadata":{},"sourceType":"module"}