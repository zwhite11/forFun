{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nconst name = 'cos';\nconst dependencies = ['typed'];\nexport const createCos =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed\n}) => {\n  /**\n   * Calculate the cosine of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.cos(x)\n   *\n   * Examples:\n   *\n   *    math.cos(2)                      // returns number -0.4161468365471422\n   *    math.cos(math.pi / 4)            // returns number  0.7071067811865475\n   *    math.cos(math.unit(180, 'deg'))  // returns number -1\n   *    math.cos(math.unit(60, 'deg'))   // returns number  0.5\n   *\n   *    const angle = 0.2\n   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1\n   *\n   * See also:\n   *\n   *    cos, tan\n   *\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} Cosine of x\n   */\n  const cos = typed(name, {\n    'number': Math.cos,\n    'Complex': function (x) {\n      return x.cos();\n    },\n    'BigNumber': function (x) {\n      return x.cos();\n    },\n    'Unit': function (x) {\n      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function cos is no angle');\n      }\n\n      return cos(x.value);\n    },\n    'Array | Matrix': function (x) {\n      return deepMap(x, cos);\n    }\n  });\n  return cos;\n});","map":null,"metadata":{},"sourceType":"module"}