{"ast":null,"code":"import { flatten, identify } from '../../utils/array';\nimport { factory } from '../../utils/factory';\nconst name = 'setIsSubset';\nconst dependencies = ['typed', 'size', 'subset', 'compareNatural', 'Index'];\nexport const createSetIsSubset =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  size,\n  subset,\n  compareNatural,\n  Index\n}) => {\n  /**\n   * Check whether a (multi)set is a subset of another (multi)set. (Every element of set1 is the element of set2.)\n   * Multi-dimension arrays will be converted to single-dimension arrays before the operation.\n   *\n   * Syntax:\n   *\n   *    math.setIsSubset(set1, set2)\n   *\n   * Examples:\n   *\n   *    math.setIsSubset([1, 2], [3, 4, 5, 6])        // returns false\n   *    math.setIsSubset([3, 4], [3, 4, 5, 6])        // returns true\n   *\n   * See also:\n   *\n   *    setUnion, setIntersect, setDifference\n   *\n   * @param {Array | Matrix}    a1  A (multi)set\n   * @param {Array | Matrix}    a2  A (multi)set\n   * @return {boolean}            true | false\n   */\n  return typed(name, {\n    'Array | Matrix, Array | Matrix': function (a1, a2) {\n      if (subset(size(a1), new Index(0)) === 0) {\n        // empty is a subset of anything\n        return true;\n      } else if (subset(size(a2), new Index(0)) === 0) {\n        // anything is not a subset of empty\n        return false;\n      }\n\n      const b1 = identify(flatten(Array.isArray(a1) ? a1 : a1.toArray()).sort(compareNatural));\n      const b2 = identify(flatten(Array.isArray(a2) ? a2 : a2.toArray()).sort(compareNatural));\n      let inb2;\n\n      for (let i = 0; i < b1.length; i++) {\n        inb2 = false;\n\n        for (let j = 0; j < b2.length; j++) {\n          if (compareNatural(b1[i].value, b2[j].value) === 0 && b1[i].identifier === b2[j].identifier) {\n            // the identifier is always a decimal int\n            inb2 = true;\n            break;\n          }\n        }\n\n        if (inb2 === false) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  });\n});","map":null,"metadata":{},"sourceType":"module"}