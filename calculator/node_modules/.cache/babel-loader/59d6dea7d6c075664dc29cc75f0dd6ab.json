{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { absNumber } from '../../plain/number';\nconst name = 'abs';\nconst dependencies = ['typed'];\nexport const createAbs =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed\n}) => {\n  /**\n   * Calculate the absolute value of a number. For matrices, the function is\n   * evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.abs(x)\n   *\n   * Examples:\n   *\n   *    math.abs(3.5)                // returns number 3.5\n   *    math.abs(-4.2)               // returns number 4.2\n   *\n   *    math.abs([3, -5, -1, 0, 2])  // returns Array [3, 5, 1, 0, 2]\n   *\n   * See also:\n   *\n   *    sign\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x\n   *            A number or matrix for which to get the absolute value\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}\n   *            Absolute value of `x`\n   */\n  const abs = typed(name, {\n    'number': absNumber,\n    'Complex': function (x) {\n      return x.abs();\n    },\n    'BigNumber': function (x) {\n      return x.abs();\n    },\n    'Fraction': function (x) {\n      return x.abs();\n    },\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since abs(0) = 0\n      return deepMap(x, abs, true);\n    },\n    'Unit': function (x) {\n      return x.abs();\n    }\n  });\n  return abs;\n});","map":null,"metadata":{},"sourceType":"module"}