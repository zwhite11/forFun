{"ast":null,"code":"import { factory } from '../../../utils/factory';\nimport { DimensionError } from '../../../error/DimensionError';\nimport { scatter } from '../../../utils/collection';\nconst name = 'algorithm06';\nconst dependencies = ['typed', 'equalScalar'];\nexport const createAlgorithm06 =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  equalScalar\n}) => {\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function algorithm06(a, b, callback) {\n    // sparse matrix arrays\n    const avalues = a._values;\n    const asize = a._size;\n    const adt = a._datatype; // sparse matrix arrays\n\n    const bvalues = b._values;\n    const bsize = b._size;\n    const bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // rows & columns\n\n\n    const rows = asize[0];\n    const columns = asize[1]; // datatype\n\n    let dt; // equal signature to use\n\n    let eq = equalScalar; // zero value\n\n    let zero = 0; // callback signature to use\n\n    let cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    const cvalues = avalues && bvalues ? [] : undefined;\n    const cindex = [];\n    const cptr = []; // matrix\n\n    const c = a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspaces\n\n    const x = cvalues ? [] : undefined; // marks indicating we have a value in x for a given column\n\n    const w = []; // marks indicating value in a given row has been updated\n\n    const u = []; // loop columns\n\n    for (let j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      const mark = j + 1; // scatter the values of A(:,j) into workspace\n\n      scatter(a, j, w, x, u, mark, c, cf); // scatter the values of B(:,j) into workspace\n\n      scatter(b, j, w, x, u, mark, c, cf); // check we need to process values (non pattern matrix)\n\n      if (x) {\n        // initialize first index in j\n        let k = cptr[j]; // loop index in j\n\n        while (k < cindex.length) {\n          // row\n          const i = cindex[k]; // check function was invoked on current row (Aij !=0 && Bij != 0)\n\n          if (u[i] === mark) {\n            // value @ i\n            const v = x[i]; // check for zero value\n\n            if (!eq(v, zero)) {\n              // push value\n              cvalues.push(v); // increment pointer\n\n              k++;\n            } else {\n              // remove value @ i, do not increment pointer\n              cindex.splice(k, 1);\n            }\n          } else {\n            // remove value @ i, do not increment pointer\n            cindex.splice(k, 1);\n          }\n        }\n      } else {\n        // initialize first index in j\n        let p = cptr[j]; // loop index in j\n\n        while (p < cindex.length) {\n          // row\n          const r = cindex[p]; // check function was invoked on current row (Aij !=0 && Bij != 0)\n\n          if (u[r] !== mark) {\n            // remove value @ i, do not increment pointer\n            cindex.splice(p, 1);\n          } else {\n            // increment pointer\n            p++;\n          }\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return c;\n  };\n});","map":null,"metadata":{},"sourceType":"module"}