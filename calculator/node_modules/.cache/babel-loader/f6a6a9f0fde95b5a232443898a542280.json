{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { asechNumber } from '../../plain/number';\nconst name = 'asech';\nconst dependencies = ['typed', 'config', 'Complex', 'BigNumber'];\nexport const createAsech =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  config,\n  Complex,\n  BigNumber\n}) => {\n  /**\n   * Calculate the hyperbolic arcsecant of a value,\n   * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.asech(x)\n   *\n   * Examples:\n   *\n   *    math.asech(0.5)       // returns 1.3169578969248166\n   *\n   * See also:\n   *\n   *    acsch, acoth\n   *\n   * @param {number | Complex | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Hyperbolic arcsecant of x\n   */\n  const asech = typed(name, {\n    'number': function (x) {\n      if (x <= 1 && x >= -1 || config.predictable) {\n        const xInv = 1 / x;\n\n        if (xInv > 0 || config.predictable) {\n          return asechNumber(x);\n        }\n\n        const ret = Math.sqrt(xInv * xInv - 1);\n        return new Complex(Math.log(ret - xInv), Math.PI);\n      }\n\n      return new Complex(x, 0).asech();\n    },\n    'Complex': function (x) {\n      return x.asech();\n    },\n    'BigNumber': function (x) {\n      return new BigNumber(1).div(x).acosh();\n    },\n    'Array | Matrix': function (x) {\n      return deepMap(x, asech);\n    }\n  });\n  return asech;\n});","map":null,"metadata":{},"sourceType":"module"}