{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { isInteger } from '../../utils/number';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { roundNumber } from '../../plain/number';\nconst NO_INT = 'Number of decimals in function round must be an integer';\nconst name = 'round';\nconst dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'BigNumber', 'DenseMatrix'];\nexport const createRound =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  matrix,\n  equalScalar,\n  zeros,\n  BigNumber,\n  DenseMatrix\n}) => {\n  const algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  const algorithm12 = createAlgorithm12({\n    typed,\n    DenseMatrix\n  });\n  const algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Round a value towards the nearest integer.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.round(x)\n   *    math.round(x, n)\n   *\n   * Examples:\n   *\n   *    math.round(3.2)              // returns number 3\n   *    math.round(3.8)              // returns number 4\n   *    math.round(-4.2)             // returns number -4\n   *    math.round(-4.7)             // returns number -5\n   *    math.round(math.pi, 3)       // returns number 3.142\n   *    math.round(123.45678, 2)     // returns number 123.46\n   *\n   *    const c = math.complex(3.2, -2.7)\n   *    math.round(c)                // returns Complex 3 - 3i\n   *\n   *    math.round([3.2, 3.8, -4.7]) // returns Array [3, 4, -5]\n   *\n   * See also:\n   *\n   *    ceil, fix, floor\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n\n  const round = typed(name, { ...roundNumberSignatures,\n    'Complex': function (x) {\n      return x.round();\n    },\n    'Complex, number': function (x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.round(n);\n    },\n    'Complex, BigNumber': function (x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      const _n = n.toNumber();\n\n      return x.round(_n);\n    },\n    'number, BigNumber': function (x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      return new BigNumber(x).toDecimalPlaces(n.toNumber());\n    },\n    'BigNumber': function (x) {\n      return x.toDecimalPlaces(0);\n    },\n    'BigNumber, BigNumber': function (x, n) {\n      if (!n.isInteger()) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.toDecimalPlaces(n.toNumber());\n    },\n    'Fraction': function (x) {\n      return x.round();\n    },\n    'Fraction, number': function (x, n) {\n      if (n % 1) {\n        throw new TypeError(NO_INT);\n      }\n\n      return x.round(n);\n    },\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since round(0) = 0\n      return deepMap(x, round, true);\n    },\n    'SparseMatrix, number | BigNumber': function (x, y) {\n      return algorithm11(x, y, round, false);\n    },\n    'DenseMatrix, number | BigNumber': function (x, y) {\n      return algorithm14(x, y, round, false);\n    },\n    'number | Complex | BigNumber, SparseMatrix': function (x, y) {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm12(y, x, round, true);\n    },\n    'number | Complex | BigNumber, DenseMatrix': function (x, y) {\n      // check scalar is zero\n      if (equalScalar(x, 0)) {\n        // do not execute algorithm, result will be a zero matrix\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm14(y, x, round, true);\n    },\n    'Array, number | BigNumber': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, round, false).valueOf();\n    },\n    'number | Complex | BigNumber, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, round, true).valueOf();\n    }\n  });\n  return round;\n});\nconst roundNumberSignatures = {\n  'number': roundNumber,\n  'number, number': function (x, n) {\n    if (!isInteger(n)) {\n      throw new TypeError(NO_INT);\n    }\n\n    if (n < 0 || n > 15) {\n      throw new Error('Number of decimals in function round must be in te range of 0-15');\n    }\n\n    return roundNumber(x, n);\n  }\n};\nexport const createRoundNumber =\n/* #__PURE__ */\nfactory(name, ['typed'], ({\n  typed\n}) => {\n  return typed(name, roundNumberSignatures);\n});","map":null,"metadata":{},"sourceType":"module"}