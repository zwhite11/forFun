{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { acotNumber } from '../../plain/number';\nconst name = 'acot';\nconst dependencies = ['typed', 'BigNumber'];\nexport const createAcot =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  BigNumber\n}) => {\n  /**\n   * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.acot(x)\n   *\n   * Examples:\n   *\n   *    math.acot(0.5)           // returns number 0.4636476090008061\n   *    math.acot(math.cot(1.5)) // returns number 1.5\n   *\n   *    math.acot(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    cot, atan\n   *\n   * @param {number | Complex | Array | Matrix} x   Function input\n   * @return {number | Complex | Array | Matrix} The arc cotangent of x\n   */\n  const acot = typed(name, {\n    'number': acotNumber,\n    'Complex': function (x) {\n      return x.acot();\n    },\n    'BigNumber': function (x) {\n      return new BigNumber(1).div(x).atan();\n    },\n    'Array | Matrix': function (x) {\n      return deepMap(x, acot);\n    }\n  });\n  return acot;\n});","map":null,"metadata":{},"sourceType":"module"}