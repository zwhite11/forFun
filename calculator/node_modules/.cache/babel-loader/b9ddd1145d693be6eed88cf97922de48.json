{"ast":null,"code":"import { compareText as _compareText } from '../../utils/string';\nimport { factory } from '../../utils/factory';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nconst name = 'compareText';\nconst dependencies = ['typed', 'matrix'];\nexport const createCompareText =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  matrix\n}) => {\n  const algorithm13 = createAlgorithm13({\n    typed\n  });\n  const algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Compare two strings lexically. Comparison is case sensitive.\n   * Returns 1 when x > y, -1 when x < y, and 0 when x == y.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.compareText(x, y)\n   *\n   * Examples:\n   *\n   *    math.compareText('B', 'A')     // returns 1\n   *    math.compareText('2', '10')    // returns 1\n   *    math.compare('2', '10')        // returns -1\n   *    math.compareNatural('2', '10') // returns -1\n   *\n   *    math.compareText('B', ['A', 'B', 'C']) // returns [1, 0, -1]\n   *\n   * See also:\n   *\n   *    equal, equalText, compare, compareNatural\n   *\n   * @param  {string | Array | DenseMatrix} x First string to compare\n   * @param  {string | Array | DenseMatrix} y Second string to compare\n   * @return {number | Array | DenseMatrix} Returns the result of the comparison:\n   *                                        1 when x > y, -1 when x < y, and 0 when x == y.\n   */\n\n  const compareText = typed(name, {\n    'any, any': _compareText,\n    'DenseMatrix, DenseMatrix': function (x, y) {\n      return algorithm13(x, y, _compareText);\n    },\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return compareText(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return compareText(matrix(x), y);\n    },\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return compareText(x, matrix(y));\n    },\n    'DenseMatrix, any': function (x, y) {\n      return algorithm14(x, y, _compareText, false);\n    },\n    'any, DenseMatrix': function (x, y) {\n      return algorithm14(y, x, _compareText, true);\n    },\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, _compareText, false).valueOf();\n    },\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, _compareText, true).valueOf();\n    }\n  });\n  return compareText;\n});\nexport const createCompareTextNumber =\n/* #__PURE__ */\nfactory(name, ['typed'], ({\n  typed\n}) => {\n  return typed(name, {\n    'any, any': _compareText\n  });\n});","map":null,"metadata":{},"sourceType":"module"}