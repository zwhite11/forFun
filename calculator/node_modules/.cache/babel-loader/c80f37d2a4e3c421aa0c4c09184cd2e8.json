{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { unaryMinusNumber } from '../../plain/number';\nconst name = 'unaryMinus';\nconst dependencies = ['typed'];\nexport const createUnaryMinus =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed\n}) => {\n  /**\n   * Inverse the sign of a value, apply a unary minus operation.\n   *\n   * For matrices, the function is evaluated element wise. Boolean values and\n   * strings will be converted to a number. For complex numbers, both real and\n   * complex value are inverted.\n   *\n   * Syntax:\n   *\n   *    math.unaryMinus(x)\n   *\n   * Examples:\n   *\n   *    math.unaryMinus(3.5)      // returns -3.5\n   *    math.unaryMinus(-4.2)     // returns 4.2\n   *\n   * See also:\n   *\n   *    add, subtract, unaryPlus\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.\n   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.\n   */\n  const unaryMinus = typed(name, {\n    'number': unaryMinusNumber,\n    'Complex': function (x) {\n      return x.neg();\n    },\n    'BigNumber': function (x) {\n      return x.neg();\n    },\n    'Fraction': function (x) {\n      return x.neg();\n    },\n    'Unit': function (x) {\n      const res = x.clone();\n      res.value = unaryMinus(x.value);\n      return res;\n    },\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since unaryMinus(0) = 0\n      return deepMap(x, unaryMinus, true);\n    } // TODO: add support for string\n\n  });\n  return unaryMinus;\n});","map":null,"metadata":{},"sourceType":"module"}