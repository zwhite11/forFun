{"ast":null,"code":"import { bitOrBigNumber } from '../../utils/bignumber/bitwise';\nimport { factory } from '../../utils/factory';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm10 } from '../../type/matrix/utils/algorithm10';\nimport { createAlgorithm04 } from '../../type/matrix/utils/algorithm04';\nimport { createAlgorithm01 } from '../../type/matrix/utils/algorithm01';\nimport { bitOrNumber } from '../../plain/number';\nconst name = 'bitOr';\nconst dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix'];\nexport const createBitOr =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  matrix,\n  equalScalar,\n  DenseMatrix\n}) => {\n  const algorithm01 = createAlgorithm01({\n    typed\n  });\n  const algorithm04 = createAlgorithm04({\n    typed,\n    equalScalar\n  });\n  const algorithm10 = createAlgorithm10({\n    typed,\n    DenseMatrix\n  });\n  const algorithm13 = createAlgorithm13({\n    typed\n  });\n  const algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Bitwise OR two values, `x | y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the lowest print base.\n   *\n   * Syntax:\n   *\n   *    math.bitOr(x, y)\n   *\n   * Examples:\n   *\n   *    math.bitOr(1, 2)               // returns number 3\n   *\n   *    math.bitOr([1, 2, 3], 4)       // returns Array [5, 6, 7]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitXor, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x First value to or\n   * @param  {number | BigNumber | Array | Matrix} y Second value to or\n   * @return {number | BigNumber | Array | Matrix} OR of `x` and `y`\n   */\n\n  const bitOr = typed(name, {\n    'number, number': bitOrNumber,\n    'BigNumber, BigNumber': bitOrBigNumber,\n    'SparseMatrix, SparseMatrix': function (x, y) {\n      return algorithm04(x, y, bitOr);\n    },\n    'SparseMatrix, DenseMatrix': function (x, y) {\n      return algorithm01(y, x, bitOr, true);\n    },\n    'DenseMatrix, SparseMatrix': function (x, y) {\n      return algorithm01(x, y, bitOr, false);\n    },\n    'DenseMatrix, DenseMatrix': function (x, y) {\n      return algorithm13(x, y, bitOr);\n    },\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return bitOr(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return bitOr(matrix(x), y);\n    },\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return bitOr(x, matrix(y));\n    },\n    'SparseMatrix, any': function (x, y) {\n      return algorithm10(x, y, bitOr, false);\n    },\n    'DenseMatrix, any': function (x, y) {\n      return algorithm14(x, y, bitOr, false);\n    },\n    'any, SparseMatrix': function (x, y) {\n      return algorithm10(y, x, bitOr, true);\n    },\n    'any, DenseMatrix': function (x, y) {\n      return algorithm14(y, x, bitOr, true);\n    },\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, bitOr, false).valueOf();\n    },\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, bitOr, true).valueOf();\n    }\n  });\n  return bitOr;\n});","map":null,"metadata":{},"sourceType":"module"}