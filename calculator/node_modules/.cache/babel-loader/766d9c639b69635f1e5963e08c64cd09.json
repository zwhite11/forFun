{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { createAlgorithm02 } from '../../type/matrix/utils/algorithm02';\nimport { createAlgorithm06 } from '../../type/matrix/utils/algorithm06';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { lcmNumber } from '../../plain/number';\nconst name = 'lcm';\nconst dependencies = ['typed', 'matrix', 'equalScalar'];\nexport const createLcm =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  matrix,\n  equalScalar\n}) => {\n  const algorithm02 = createAlgorithm02({\n    typed,\n    equalScalar\n  });\n  const algorithm06 = createAlgorithm06({\n    typed,\n    equalScalar\n  });\n  const algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  const algorithm13 = createAlgorithm13({\n    typed\n  });\n  const algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Calculate the least common multiple for two or more values or arrays.\n   *\n   * lcm is defined as:\n   *\n   *     lcm(a, b) = abs(a * b) / gcd(a, b)\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.lcm(a, b)\n   *    math.lcm(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.lcm(4, 6)               // returns 12\n   *    math.lcm(6, 21)              // returns 42\n   *    math.lcm(6, 21, 5)           // returns 210\n   *\n   *    math.lcm([4, 6], [6, 21])    // returns [12, 42]\n   *\n   * See also:\n   *\n   *    gcd, xgcd\n   *\n   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Array | Matrix}                           The least common multiple\n   */\n\n  const lcm = typed(name, {\n    'number, number': lcmNumber,\n    'BigNumber, BigNumber': _lcmBigNumber,\n    'Fraction, Fraction': function (x, y) {\n      return x.lcm(y);\n    },\n    'SparseMatrix, SparseMatrix': function (x, y) {\n      return algorithm06(x, y, lcm);\n    },\n    'SparseMatrix, DenseMatrix': function (x, y) {\n      return algorithm02(y, x, lcm, true);\n    },\n    'DenseMatrix, SparseMatrix': function (x, y) {\n      return algorithm02(x, y, lcm, false);\n    },\n    'DenseMatrix, DenseMatrix': function (x, y) {\n      return algorithm13(x, y, lcm);\n    },\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return lcm(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return lcm(matrix(x), y);\n    },\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return lcm(x, matrix(y));\n    },\n    'SparseMatrix, number | BigNumber': function (x, y) {\n      return algorithm11(x, y, lcm, false);\n    },\n    'DenseMatrix, number | BigNumber': function (x, y) {\n      return algorithm14(x, y, lcm, false);\n    },\n    'number | BigNumber, SparseMatrix': function (x, y) {\n      return algorithm11(y, x, lcm, true);\n    },\n    'number | BigNumber, DenseMatrix': function (x, y) {\n      return algorithm14(y, x, lcm, true);\n    },\n    'Array, number | BigNumber': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, lcm, false).valueOf();\n    },\n    'number | BigNumber, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, lcm, true).valueOf();\n    },\n    // TODO: need a smarter notation here\n    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function (a, b, args) {\n      let res = lcm(a, b);\n\n      for (let i = 0; i < args.length; i++) {\n        res = lcm(res, args[i]);\n      }\n\n      return res;\n    }\n  });\n  return lcm;\n  /**\n   * Calculate lcm for two BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns the least common multiple of a and b\n   * @private\n   */\n\n  function _lcmBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function lcm must be integer numbers');\n    }\n\n    if (a.isZero()) {\n      return a;\n    }\n\n    if (b.isZero()) {\n      return b;\n    } // https://en.wikipedia.org/wiki/Euclidean_algorithm\n    // evaluate lcm here inline to reduce overhead\n\n\n    const prod = a.times(b);\n\n    while (!b.isZero()) {\n      const t = b;\n      b = a.mod(t);\n      a = t;\n    }\n\n    return prod.div(a).abs();\n  }\n});","map":null,"metadata":{},"sourceType":"module"}