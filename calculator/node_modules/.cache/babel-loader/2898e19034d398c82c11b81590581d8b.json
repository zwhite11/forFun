{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { createAlgorithm02 } from '../../type/matrix/utils/algorithm02';\nimport { createAlgorithm03 } from '../../type/matrix/utils/algorithm03';\nimport { createAlgorithm09 } from '../../type/matrix/utils/algorithm09';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nconst name = 'atan2';\nconst dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix'];\nexport const createAtan2 =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  matrix,\n  equalScalar,\n  BigNumber,\n  DenseMatrix\n}) => {\n  const algorithm02 = createAlgorithm02({\n    typed,\n    equalScalar\n  });\n  const algorithm03 = createAlgorithm03({\n    typed\n  });\n  const algorithm09 = createAlgorithm09({\n    typed,\n    equalScalar\n  });\n  const algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  const algorithm12 = createAlgorithm12({\n    typed,\n    DenseMatrix\n  });\n  const algorithm13 = createAlgorithm13({\n    typed\n  });\n  const algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Calculate the inverse tangent function with two arguments, y/x.\n   * By providing two arguments, the right quadrant of the computed angle can be\n   * determined.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.atan2(y, x)\n   *\n   * Examples:\n   *\n   *    math.atan2(2, 2) / math.pi       // returns number 0.25\n   *\n   *    const angle = math.unit(60, 'deg') // returns Unit 60 deg\n   *    const x = math.cos(angle)\n   *    const y = math.sin(angle)\n   *\n   *    math.atan(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    tan, atan, sin, cos\n   *\n   * @param {number | Array | Matrix} y  Second dimension\n   * @param {number | Array | Matrix} x  First dimension\n   * @return {number | Array | Matrix} Four-quadrant inverse tangent\n   */\n\n  const atan2 = typed(name, {\n    'number, number': Math.atan2,\n    // Complex numbers doesn't seem to have a reasonable implementation of\n    // atan2(). Even Matlab removed the support, after they only calculated\n    // the atan only on base of the real part of the numbers and ignored the imaginary.\n    'BigNumber, BigNumber': function (y, x) {\n      return BigNumber.atan2(y, x);\n    },\n    'SparseMatrix, SparseMatrix': function (x, y) {\n      return algorithm09(x, y, atan2, false);\n    },\n    'SparseMatrix, DenseMatrix': function (x, y) {\n      // mind the order of y and x!\n      return algorithm02(y, x, atan2, true);\n    },\n    'DenseMatrix, SparseMatrix': function (x, y) {\n      return algorithm03(x, y, atan2, false);\n    },\n    'DenseMatrix, DenseMatrix': function (x, y) {\n      return algorithm13(x, y, atan2);\n    },\n    'Array, Array': function (x, y) {\n      return atan2(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function (x, y) {\n      return atan2(matrix(x), y);\n    },\n    'Matrix, Array': function (x, y) {\n      return atan2(x, matrix(y));\n    },\n    'SparseMatrix, number | BigNumber': function (x, y) {\n      return algorithm11(x, y, atan2, false);\n    },\n    'DenseMatrix, number | BigNumber': function (x, y) {\n      return algorithm14(x, y, atan2, false);\n    },\n    'number | BigNumber, SparseMatrix': function (x, y) {\n      // mind the order of y and x\n      return algorithm12(y, x, atan2, true);\n    },\n    'number | BigNumber, DenseMatrix': function (x, y) {\n      // mind the order of y and x\n      return algorithm14(y, x, atan2, true);\n    },\n    'Array, number | BigNumber': function (x, y) {\n      return algorithm14(matrix(x), y, atan2, false).valueOf();\n    },\n    'number | BigNumber, Array': function (x, y) {\n      return algorithm14(matrix(y), x, atan2, true).valueOf();\n    }\n  });\n  return atan2;\n});","map":null,"metadata":{},"sourceType":"module"}