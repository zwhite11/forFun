{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { log10Number } from '../../plain/number';\nconst name = 'log10';\nconst dependencies = ['typed', 'config', 'Complex'];\nexport const createLog10 =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  config,\n  Complex\n}) => {\n  /**\n   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.log10(x)\n   *\n   * Examples:\n   *\n   *    math.log10(0.00001)            // returns -5\n   *    math.log10(10000)              // returns 4\n   *    math.log(10000) / math.log(10) // returns 4\n   *    math.pow(10, 4)                // returns 10000\n   *\n   * See also:\n   *\n   *    exp, log, log1p, log2\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the logarithm.\n   * @return {number | BigNumber | Complex | Array | Matrix}\n   *            Returns the 10-base logarithm of `x`\n   */\n  const log10 = typed(name, {\n    'number': function (x) {\n      if (x >= 0 || config.predictable) {\n        return log10Number(x);\n      } else {\n        // negative value -> complex value computation\n        return new Complex(x, 0).log().div(Math.LN10);\n      }\n    },\n    'Complex': function (x) {\n      return new Complex(x).log().div(Math.LN10);\n    },\n    'BigNumber': function (x) {\n      if (!x.isNegative() || config.predictable) {\n        return x.log();\n      } else {\n        // downgrade to number, return Complex valued result\n        return new Complex(x.toNumber(), 0).log().div(Math.LN10);\n      }\n    },\n    'Array | Matrix': function (x) {\n      return deepMap(x, log10);\n    }\n  });\n  return log10;\n});","map":null,"metadata":{},"sourceType":"module"}