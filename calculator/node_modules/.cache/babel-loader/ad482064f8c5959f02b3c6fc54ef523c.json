{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { createRow } from '../../function/matrix/row';\nimport { errorTransform } from './utils/errorTransform';\nimport { isNumber } from '../../utils/is';\nconst name = 'row';\nconst dependencies = ['typed', 'Index', 'matrix', 'range'];\n/**\n * Attach a transform function to matrix.column\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `index` parameter of function column\n * from zero-based to one-based\n */\n\nexport const createRowTransform =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  Index,\n  matrix,\n  range\n}) => {\n  const row = createRow({\n    typed,\n    Index,\n    matrix,\n    range\n  }); // @see: comment of row itself\n\n  return typed('row', {\n    '...any': function (args) {\n      // change last argument from zero-based to one-based\n      const lastIndex = args.length - 1;\n      const last = args[lastIndex];\n\n      if (isNumber(last)) {\n        args[lastIndex] = last - 1;\n      }\n\n      try {\n        return row.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","map":null,"metadata":{},"sourceType":"module"}