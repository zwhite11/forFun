{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { cotNumber } from '../../plain/number';\nconst name = 'cot';\nconst dependencies = ['typed', 'BigNumber'];\nexport const createCot =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  BigNumber\n}) => {\n  /**\n   * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.cot(x)\n   *\n   * Examples:\n   *\n   *    math.cot(2)      // returns number -0.45765755436028577\n   *    1 / math.tan(2)  // returns number -0.45765755436028577\n   *\n   * See also:\n   *\n   *    tan, sec, csc\n   *\n   * @param {number | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Cotangent of x\n   */\n  const cot = typed(name, {\n    'number': cotNumber,\n    'Complex': function (x) {\n      return x.cot();\n    },\n    'BigNumber': function (x) {\n      return new BigNumber(1).div(x.tan());\n    },\n    'Unit': function (x) {\n      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function cot is no angle');\n      }\n\n      return cot(x.value);\n    },\n    'Array | Matrix': function (x) {\n      return deepMap(x, cot);\n    }\n  });\n  return cot;\n});","map":null,"metadata":{},"sourceType":"module"}