{"ast":null,"code":"import { factory } from '../utils/factory';\nimport { deepMap } from '../utils/collection';\nconst name = 'boolean';\nconst dependencies = ['typed'];\nexport const createBoolean =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed\n}) => {\n  /**\n   * Create a boolean or convert a string or number to a boolean.\n   * In case of a number, `true` is returned for non-zero numbers, and `false` in\n   * case of zero.\n   * Strings can be `'true'` or `'false'`, or can contain a number.\n   * When value is a matrix, all elements will be converted to boolean.\n   *\n   * Syntax:\n   *\n   *    math.boolean(x)\n   *\n   * Examples:\n   *\n   *    math.boolean(0)     // returns false\n   *    math.boolean(1)     // returns true\n   *    math.boolean(-3)     // returns true\n   *    math.boolean('true')     // returns true\n   *    math.boolean('false')     // returns false\n   *    math.boolean([1, 0, 1, 1])     // returns [true, false, true, true]\n   *\n   * See also:\n   *\n   *    bignumber, complex, index, matrix, string, unit\n   *\n   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type\n   * @return {boolean | Array | Matrix} The boolean value\n   */\n  const bool = typed(name, {\n    '': function () {\n      return false;\n    },\n    'boolean': function (x) {\n      return x;\n    },\n    'number': function (x) {\n      return !!x;\n    },\n    'null': function (x) {\n      return false;\n    },\n    'BigNumber': function (x) {\n      return !x.isZero();\n    },\n    'string': function (x) {\n      // try case insensitive\n      const lcase = x.toLowerCase();\n\n      if (lcase === 'true') {\n        return true;\n      } else if (lcase === 'false') {\n        return false;\n      } // test whether value is a valid number\n\n\n      const num = Number(x);\n\n      if (x !== '' && !isNaN(num)) {\n        return !!num;\n      }\n\n      throw new Error('Cannot convert \"' + x + '\" to a boolean');\n    },\n    'Array | Matrix': function (x) {\n      return deepMap(x, bool);\n    }\n  });\n  return bool;\n});","map":null,"metadata":{},"sourceType":"module"}