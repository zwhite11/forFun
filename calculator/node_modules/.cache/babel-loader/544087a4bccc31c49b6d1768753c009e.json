{"ast":null,"code":"import { createAlgorithm02 } from '../../type/matrix/utils/algorithm02';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { createAlgorithm01 } from '../../type/matrix/utils/algorithm01';\nimport { createAlgorithm10 } from '../../type/matrix/utils/algorithm10';\nimport { createAlgorithm08 } from '../../type/matrix/utils/algorithm08';\nimport { factory } from '../../utils/factory';\nimport { rightLogShiftNumber } from '../../plain/number';\nconst name = 'rightLogShift';\nconst dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];\nexport const createRightLogShift =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  matrix,\n  equalScalar,\n  zeros,\n  DenseMatrix\n}) => {\n  const algorithm01 = createAlgorithm01({\n    typed\n  });\n  const algorithm02 = createAlgorithm02({\n    typed,\n    equalScalar\n  });\n  const algorithm08 = createAlgorithm08({\n    typed,\n    equalScalar\n  });\n  const algorithm10 = createAlgorithm10({\n    typed,\n    DenseMatrix\n  });\n  const algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  const algorithm13 = createAlgorithm13({\n    typed\n  });\n  const algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.rightLogShift(x, y)\n   *\n   * Examples:\n   *\n   *    math.rightLogShift(4, 2)               // returns number 1\n   *\n   *    math.rightLogShift([16, -32, 64], 4)   // returns Array [1, 2, 3]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift\n   *\n   * @param  {number | Array | Matrix} x Value to be shifted\n   * @param  {number} y Amount of shifts\n   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times\n   */\n\n  const rightLogShift = typed(name, {\n    'number, number': rightLogShiftNumber,\n    // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift\n    'SparseMatrix, SparseMatrix': function (x, y) {\n      return algorithm08(x, y, rightLogShift, false);\n    },\n    'SparseMatrix, DenseMatrix': function (x, y) {\n      return algorithm02(y, x, rightLogShift, true);\n    },\n    'DenseMatrix, SparseMatrix': function (x, y) {\n      return algorithm01(x, y, rightLogShift, false);\n    },\n    'DenseMatrix, DenseMatrix': function (x, y) {\n      return algorithm13(x, y, rightLogShift);\n    },\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return rightLogShift(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return rightLogShift(matrix(x), y);\n    },\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return rightLogShift(x, matrix(y));\n    },\n    'SparseMatrix, number | BigNumber': function (x, y) {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n\n      return algorithm11(x, y, rightLogShift, false);\n    },\n    'DenseMatrix, number | BigNumber': function (x, y) {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n\n      return algorithm14(x, y, rightLogShift, false);\n    },\n    'number | BigNumber, SparseMatrix': function (x, y) {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm10(y, x, rightLogShift, true);\n    },\n    'number | BigNumber, DenseMatrix': function (x, y) {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n\n      return algorithm14(y, x, rightLogShift, true);\n    },\n    'Array, number | BigNumber': function (x, y) {\n      // use matrix implementation\n      return rightLogShift(matrix(x), y).valueOf();\n    },\n    'number | BigNumber, Array': function (x, y) {\n      // use matrix implementation\n      return rightLogShift(x, matrix(y)).valueOf();\n    }\n  });\n  return rightLogShift;\n});","map":null,"metadata":{},"sourceType":"module"}