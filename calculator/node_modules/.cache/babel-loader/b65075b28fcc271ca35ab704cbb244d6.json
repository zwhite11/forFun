{"ast":null,"code":"import { createAlgorithm02 } from '../../type/matrix/utils/algorithm02';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { createAlgorithm06 } from '../../type/matrix/utils/algorithm06';\nimport { factory } from '../../utils/factory';\nimport { andNumber } from '../../plain/number';\nconst name = 'and';\nconst dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'not'];\nexport const createAnd =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  matrix,\n  equalScalar,\n  zeros,\n  not\n}) => {\n  const algorithm02 = createAlgorithm02({\n    typed,\n    equalScalar\n  });\n  const algorithm06 = createAlgorithm06({\n    typed,\n    equalScalar\n  });\n  const algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  const algorithm13 = createAlgorithm13({\n    typed\n  });\n  const algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.and(x, y)\n   *\n   * Examples:\n   *\n   *    math.and(2, 4)   // returns true\n   *\n   *    a = [2, 0, 0]\n   *    b = [3, 7, 0]\n   *    c = 0\n   *\n   *    math.and(a, b)   // returns [true, false, false]\n   *    math.and(a, c)   // returns [false, false, false]\n   *\n   * See also:\n   *\n   *    not, or, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when both inputs are defined with a nonzero/nonempty value.\n   */\n\n  const and = typed(name, {\n    'number, number': andNumber,\n    'Complex, Complex': function (x, y) {\n      return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);\n    },\n    'BigNumber, BigNumber': function (x, y) {\n      return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();\n    },\n    'Unit, Unit': function (x, y) {\n      return and(x.value || 0, y.value || 0);\n    },\n    'SparseMatrix, SparseMatrix': function (x, y) {\n      return algorithm06(x, y, and, false);\n    },\n    'SparseMatrix, DenseMatrix': function (x, y) {\n      return algorithm02(y, x, and, true);\n    },\n    'DenseMatrix, SparseMatrix': function (x, y) {\n      return algorithm02(x, y, and, false);\n    },\n    'DenseMatrix, DenseMatrix': function (x, y) {\n      return algorithm13(x, y, and);\n    },\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return and(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return and(matrix(x), y);\n    },\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return and(x, matrix(y));\n    },\n    'SparseMatrix, any': function (x, y) {\n      // check scalar\n      if (not(y)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n\n      return algorithm11(x, y, and, false);\n    },\n    'DenseMatrix, any': function (x, y) {\n      // check scalar\n      if (not(y)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n\n      return algorithm14(x, y, and, false);\n    },\n    'any, SparseMatrix': function (x, y) {\n      // check scalar\n      if (not(x)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n\n      return algorithm11(y, x, and, true);\n    },\n    'any, DenseMatrix': function (x, y) {\n      // check scalar\n      if (not(x)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n\n      return algorithm14(y, x, and, true);\n    },\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return and(matrix(x), y).valueOf();\n    },\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return and(x, matrix(y)).valueOf();\n    }\n  });\n  return and;\n});","map":null,"metadata":{},"sourceType":"module"}