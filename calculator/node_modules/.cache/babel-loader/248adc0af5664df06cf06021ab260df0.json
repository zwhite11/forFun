{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { cosh as coshNumber } from '../../utils/number';\nconst name = 'cosh';\nconst dependencies = ['typed'];\nexport const createCosh =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed\n}) => {\n  /**\n   * Calculate the hyperbolic cosine of a value,\n   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.cosh(x)\n   *\n   * Examples:\n   *\n   *    math.cosh(0.5)       // returns number 1.1276259652063807\n   *\n   * See also:\n   *\n   *    sinh, tanh\n   *\n   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic cosine of x\n   */\n  const cosh = typed(name, {\n    'number': coshNumber,\n    'Complex': function (x) {\n      return x.cosh();\n    },\n    'BigNumber': function (x) {\n      return x.cosh();\n    },\n    'Unit': function (x) {\n      if (!x.hasBase(x.constructor.BASE_UNITS.ANGLE)) {\n        throw new TypeError('Unit in function cosh is no angle');\n      }\n\n      return cosh(x.value);\n    },\n    'Array | Matrix': function (x) {\n      return deepMap(x, cosh);\n    }\n  });\n  return cosh;\n});","map":null,"metadata":{},"sourceType":"module"}