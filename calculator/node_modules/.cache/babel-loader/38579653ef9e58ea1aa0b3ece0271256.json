{"ast":null,"code":"import { deepForEach } from '../../utils/collection';\nimport { factory } from '../../utils/factory';\nconst name = 'multinomial';\nconst dependencies = ['typed', 'add', 'divide', 'multiply', 'factorial', 'isInteger', 'isPositive'];\nexport const createMultinomial =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  add,\n  divide,\n  multiply,\n  factorial,\n  isInteger,\n  isPositive\n}) => {\n  /**\n   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.\n   *\n   * multinomial takes one array of integers as an argument.\n   * The following condition must be enforced: every ai <= 0\n   *\n   * Syntax:\n   *\n   *     math.multinomial(a) // a is an array type\n   *\n   * Examples:\n   *\n   *    math.multinomial([1,2,1]) // returns 12\n   *\n   * See also:\n   *\n   *    combinations, factorial\n   *\n   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset\n   * @return {Number | BigNumber}         Multinomial coefficient.\n   */\n  return typed(name, {\n    'Array | Matrix': function (a) {\n      let sum = 0;\n      let denom = 1;\n      deepForEach(a, function (ai) {\n        if (!isInteger(ai) || !isPositive(ai)) {\n          throw new TypeError('Positive integer value expected in function multinomial');\n        }\n\n        sum = add(sum, ai);\n        denom = multiply(denom, factorial(ai));\n      });\n      return divide(factorial(sum), denom);\n    }\n  });\n});","map":null,"metadata":{},"sourceType":"module"}