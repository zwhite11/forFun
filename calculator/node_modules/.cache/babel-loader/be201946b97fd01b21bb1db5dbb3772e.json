{"ast":null,"code":"import { factory } from '../../../utils/factory';\nimport { deepMap } from '../../../utils/collection';\nconst name = 'fraction';\nconst dependencies = ['typed', 'Fraction'];\nexport const createFraction =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  Fraction\n}) => {\n  /**\n   * Create a fraction convert a value to a fraction.\n   *\n   * Syntax:\n   *     math.fraction(numerator, denominator)\n   *     math.fraction({n: numerator, d: denominator})\n   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries\n   *                                                   into fractions\n   *\n   * Examples:\n   *\n   *     math.fraction(1, 3)\n   *     math.fraction('2/3')\n   *     math.fraction({n: 2, d: 3})\n   *     math.fraction([0.2, 0.25, 1.25])\n   *\n   * See also:\n   *\n   *    bignumber, number, string, unit\n   *\n   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]\n   *            Arguments specifying the numerator and denominator of\n   *            the fraction\n   * @return {Fraction | Array | Matrix} Returns a fraction\n   */\n  const fraction = typed('fraction', {\n    'number': function (x) {\n      if (!isFinite(x) || isNaN(x)) {\n        throw new Error(x + ' cannot be represented as a fraction');\n      }\n\n      return new Fraction(x);\n    },\n    'string': function (x) {\n      return new Fraction(x);\n    },\n    'number, number': function (numerator, denominator) {\n      return new Fraction(numerator, denominator);\n    },\n    'null': function (x) {\n      return new Fraction(0);\n    },\n    'BigNumber': function (x) {\n      return new Fraction(x.toString());\n    },\n    'Fraction': function (x) {\n      return x; // fractions are immutable\n    },\n    'Object': function (x) {\n      return new Fraction(x);\n    },\n    'Array | Matrix': function (x) {\n      return deepMap(x, fraction);\n    }\n  });\n  return fraction;\n});","map":null,"metadata":{},"sourceType":"module"}