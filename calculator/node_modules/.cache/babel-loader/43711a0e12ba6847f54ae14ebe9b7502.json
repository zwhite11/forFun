{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { atanhNumber } from '../../plain/number';\nconst name = 'atanh';\nconst dependencies = ['typed', 'config', 'Complex'];\nexport const createAtanh =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  config,\n  Complex\n}) => {\n  /**\n   * Calculate the hyperbolic arctangent of a value,\n   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.atanh(x)\n   *\n   * Examples:\n   *\n   *    math.atanh(0.5)       // returns 0.5493061443340549\n   *\n   * See also:\n   *\n   *    acosh, asinh\n   *\n   * @param {number | Complex | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Hyperbolic arctangent of x\n   */\n  const atanh = typed(name, {\n    'number': function (x) {\n      if (x <= 1 && x >= -1 || config.predictable) {\n        return atanhNumber(x);\n      }\n\n      return new Complex(x, 0).atanh();\n    },\n    'Complex': function (x) {\n      return x.atanh();\n    },\n    'BigNumber': function (x) {\n      return x.atanh();\n    },\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since atanh(0) = 0\n      return deepMap(x, atanh, true);\n    }\n  });\n  return atanh;\n});","map":null,"metadata":{},"sourceType":"module"}