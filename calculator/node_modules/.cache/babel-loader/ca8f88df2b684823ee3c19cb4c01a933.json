{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { asecNumber } from '../../plain/number';\nconst name = 'asec';\nconst dependencies = ['typed', 'config', 'Complex', 'BigNumber'];\nexport const createAsec =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  config,\n  Complex,\n  BigNumber\n}) => {\n  /**\n   * Calculate the inverse secant of a value. Defined as `asec(x) = acos(1/x)`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.asec(x)\n   *\n   * Examples:\n   *\n   *    math.asec(0.5)           // returns 1.0471975511965979\n   *    math.asec(math.sec(1.5)) // returns 1.5\n   *\n   *    math.asec(2)             // returns 0 + 1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    acos, acot, acsc\n   *\n   * @param {number | Complex | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} The arc secant of x\n   */\n  const asec = typed(name, {\n    'number': function (x) {\n      if (x <= -1 || x >= 1 || config.predictable) {\n        return asecNumber(x);\n      }\n\n      return new Complex(x, 0).asec();\n    },\n    'Complex': function (x) {\n      return x.asec();\n    },\n    'BigNumber': function (x) {\n      return new BigNumber(1).div(x).acos();\n    },\n    'Array | Matrix': function (x) {\n      return deepMap(x, asec);\n    }\n  });\n  return asec;\n});","map":null,"metadata":{},"sourceType":"module"}