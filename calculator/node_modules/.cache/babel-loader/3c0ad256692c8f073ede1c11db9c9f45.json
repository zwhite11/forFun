{"ast":null,"code":"import { bitAndBigNumber } from '../../utils/bignumber/bitwise';\nimport { createAlgorithm02 } from '../../type/matrix/utils/algorithm02';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { createAlgorithm06 } from '../../type/matrix/utils/algorithm06';\nimport { factory } from '../../utils/factory';\nimport { bitAndNumber } from '../../plain/number';\nconst name = 'bitAnd';\nconst dependencies = ['typed', 'matrix', 'equalScalar'];\nexport const createBitAnd =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  matrix,\n  equalScalar\n}) => {\n  const algorithm02 = createAlgorithm02({\n    typed,\n    equalScalar\n  });\n  const algorithm06 = createAlgorithm06({\n    typed,\n    equalScalar\n  });\n  const algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  const algorithm13 = createAlgorithm13({\n    typed\n  });\n  const algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Bitwise AND two values, `x & y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.bitAnd(x, y)\n   *\n   * Examples:\n   *\n   *    math.bitAnd(53, 131)               // returns number 1\n   *\n   *    math.bitAnd([1, 12, 31], 42)       // returns Array [0, 8, 10]\n   *\n   * See also:\n   *\n   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x First value to and\n   * @param  {number | BigNumber | Array | Matrix} y Second value to and\n   * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`\n   */\n\n  const bitAnd = typed(name, {\n    'number, number': bitAndNumber,\n    'BigNumber, BigNumber': bitAndBigNumber,\n    'SparseMatrix, SparseMatrix': function (x, y) {\n      return algorithm06(x, y, bitAnd, false);\n    },\n    'SparseMatrix, DenseMatrix': function (x, y) {\n      return algorithm02(y, x, bitAnd, true);\n    },\n    'DenseMatrix, SparseMatrix': function (x, y) {\n      return algorithm02(x, y, bitAnd, false);\n    },\n    'DenseMatrix, DenseMatrix': function (x, y) {\n      return algorithm13(x, y, bitAnd);\n    },\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return bitAnd(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return bitAnd(matrix(x), y);\n    },\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return bitAnd(x, matrix(y));\n    },\n    'SparseMatrix, any': function (x, y) {\n      return algorithm11(x, y, bitAnd, false);\n    },\n    'DenseMatrix, any': function (x, y) {\n      return algorithm14(x, y, bitAnd, false);\n    },\n    'any, SparseMatrix': function (x, y) {\n      return algorithm11(y, x, bitAnd, true);\n    },\n    'any, DenseMatrix': function (x, y) {\n      return algorithm14(y, x, bitAnd, true);\n    },\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, bitAnd, false).valueOf();\n    },\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, bitAnd, true).valueOf();\n    }\n  });\n  return bitAnd;\n});","map":null,"metadata":{},"sourceType":"module"}