{"ast":null,"code":"import { createAlgorithm03 } from '../../type/matrix/utils/algorithm03';\nimport { createAlgorithm07 } from '../../type/matrix/utils/algorithm07';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { factory } from '../../utils/factory';\nimport { xorNumber } from '../../plain/number';\nconst name = 'xor';\nconst dependencies = ['typed', 'matrix', 'DenseMatrix'];\nexport const createXor =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  matrix,\n  DenseMatrix\n}) => {\n  const algorithm03 = createAlgorithm03({\n    typed\n  });\n  const algorithm07 = createAlgorithm07({\n    typed,\n    DenseMatrix\n  });\n  const algorithm12 = createAlgorithm12({\n    typed,\n    DenseMatrix\n  });\n  const algorithm13 = createAlgorithm13({\n    typed\n  });\n  const algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.xor(x, y)\n   *\n   * Examples:\n   *\n   *    math.xor(2, 4)   // returns false\n   *\n   *    a = [2, 0, 0]\n   *    b = [2, 7, 0]\n   *    c = 0\n   *\n   *    math.xor(a, b)   // returns [false, true, false]\n   *    math.xor(a, c)   // returns [true, false, false]\n   *\n   * See also:\n   *\n   *    and, not, or\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when one and only one input is defined with a nonzero/nonempty value.\n   */\n\n  const xor = typed(name, {\n    'number, number': xorNumber,\n    'Complex, Complex': function (x, y) {\n      return (x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0);\n    },\n    'BigNumber, BigNumber': function (x, y) {\n      return (!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN());\n    },\n    'Unit, Unit': function (x, y) {\n      return xor(x.value || 0, y.value || 0);\n    },\n    'SparseMatrix, SparseMatrix': function (x, y) {\n      return algorithm07(x, y, xor);\n    },\n    'SparseMatrix, DenseMatrix': function (x, y) {\n      return algorithm03(y, x, xor, true);\n    },\n    'DenseMatrix, SparseMatrix': function (x, y) {\n      return algorithm03(x, y, xor, false);\n    },\n    'DenseMatrix, DenseMatrix': function (x, y) {\n      return algorithm13(x, y, xor);\n    },\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return xor(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return xor(matrix(x), y);\n    },\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return xor(x, matrix(y));\n    },\n    'SparseMatrix, any': function (x, y) {\n      return algorithm12(x, y, xor, false);\n    },\n    'DenseMatrix, any': function (x, y) {\n      return algorithm14(x, y, xor, false);\n    },\n    'any, SparseMatrix': function (x, y) {\n      return algorithm12(y, x, xor, true);\n    },\n    'any, DenseMatrix': function (x, y) {\n      return algorithm14(y, x, xor, true);\n    },\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, xor, false).valueOf();\n    },\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, xor, true).valueOf();\n    }\n  });\n  return xor;\n});","map":null,"metadata":{},"sourceType":"module"}