{"ast":null,"code":"import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual';\nimport { nearlyEqual } from '../../utils/number';\nimport { factory } from '../../utils/factory';\nimport { complexEquals } from '../../utils/complex';\nconst name = 'equalScalar';\nconst dependencies = ['typed', 'config'];\nexport const createEqualScalar =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  config\n}) => {\n  /**\n   * Test whether two scalar values are nearly equal.\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare\n   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false\n   * @private\n   */\n  const equalScalar = typed(name, {\n    'boolean, boolean': function (x, y) {\n      return x === y;\n    },\n    'number, number': function (x, y) {\n      return nearlyEqual(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function (x, y) {\n      return x.eq(y) || bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function (x, y) {\n      return x.equals(y);\n    },\n    'Complex, Complex': function (x, y) {\n      return complexEquals(x, y, config.epsilon);\n    },\n    'Unit, Unit': function (x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return equalScalar(x.value, y.value);\n    }\n  });\n  return equalScalar;\n});\nexport const createEqualScalarNumber = factory(name, ['typed', 'config'], ({\n  typed,\n  config\n}) => {\n  return typed(name, {\n    'number, number': function (x, y) {\n      return nearlyEqual(x, y, config.epsilon);\n    }\n  });\n});","map":null,"metadata":{},"sourceType":"module"}