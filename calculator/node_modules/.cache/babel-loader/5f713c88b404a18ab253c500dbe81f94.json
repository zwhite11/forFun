{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nconst name = 'asin';\nconst dependencies = ['typed', 'config', 'Complex'];\nexport const createAsin =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  config,\n  Complex\n}) => {\n  /**\n   * Calculate the inverse sine of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.asin(x)\n   *\n   * Examples:\n   *\n   *    math.asin(0.5)           // returns number 0.5235987755982989\n   *    math.asin(math.sin(1.5)) // returns number ~1.5\n   *\n   *    math.asin(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    sin, atan, acos\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} The arc sine of x\n   */\n  const asin = typed(name, {\n    'number': function (x) {\n      if (x >= -1 && x <= 1 || config.predictable) {\n        return Math.asin(x);\n      } else {\n        return new Complex(x, 0).asin();\n      }\n    },\n    'Complex': function (x) {\n      return x.asin();\n    },\n    'BigNumber': function (x) {\n      return x.asin();\n    },\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since asin(0) = 0\n      return deepMap(x, asin, true);\n    }\n  });\n  return asin;\n});","map":null,"metadata":{},"sourceType":"module"}