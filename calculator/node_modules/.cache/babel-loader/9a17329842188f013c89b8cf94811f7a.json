{"ast":null,"code":"import { factory } from '../../utils/factory';\nconst name = 'kldivergence';\nconst dependencies = ['typed', 'matrix', 'divide', 'sum', 'multiply', 'dotDivide', 'log', 'isNumeric'];\nexport const createKldivergence =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  matrix,\n  divide,\n  sum,\n  multiply,\n  dotDivide,\n  log,\n  isNumeric\n}) => {\n  /**\n     * Calculate the Kullback-Leibler (KL) divergence  between two distributions\n     *\n     * Syntax:\n     *\n     *     math.kldivergence(x, y)\n     *\n     * Examples:\n     *\n     *     math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])   //returns 0.24376698773121153\n     *\n     *\n     * @param  {Array | Matrix} q    First vector\n     * @param  {Array | Matrix} p    Second vector\n     * @return {number}              Returns distance between q and p\n     */\n  return typed(name, {\n    'Array, Array': function (q, p) {\n      return _kldiv(matrix(q), matrix(p));\n    },\n    'Matrix, Array': function (q, p) {\n      return _kldiv(q, matrix(p));\n    },\n    'Array, Matrix': function (q, p) {\n      return _kldiv(matrix(q), p);\n    },\n    'Matrix, Matrix': function (q, p) {\n      return _kldiv(q, p);\n    }\n  });\n\n  function _kldiv(q, p) {\n    const plength = p.size().length;\n    const qlength = q.size().length;\n\n    if (plength > 1) {\n      throw new Error('first object must be one dimensional');\n    }\n\n    if (qlength > 1) {\n      throw new Error('second object must be one dimensional');\n    }\n\n    if (plength !== qlength) {\n      throw new Error('Length of two vectors must be equal');\n    } // Before calculation, apply normalization\n\n\n    const sumq = sum(q);\n\n    if (sumq === 0) {\n      throw new Error('Sum of elements in first object must be non zero');\n    }\n\n    const sump = sum(p);\n\n    if (sump === 0) {\n      throw new Error('Sum of elements in second object must be non zero');\n    }\n\n    const qnorm = divide(q, sum(q));\n    const pnorm = divide(p, sum(p));\n    const result = sum(multiply(qnorm, log(dotDivide(qnorm, pnorm))));\n\n    if (isNumeric(result)) {\n      return result;\n    } else {\n      return Number.NaN;\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module"}