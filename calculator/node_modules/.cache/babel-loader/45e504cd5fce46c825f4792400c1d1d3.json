{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nconst name = 'atan';\nconst dependencies = ['typed'];\nexport const createAtan =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed\n}) => {\n  /**\n   * Calculate the inverse tangent of a value.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.atan(x)\n   *\n   * Examples:\n   *\n   *    math.atan(0.5)           // returns number 0.4636476090008061\n   *    math.atan(math.tan(1.5)) // returns number 1.5\n   *\n   *    math.atan(2)             // returns Complex 1.5707963267948966 -1.3169578969248166 i\n   *\n   * See also:\n   *\n   *    tan, asin, acos\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input\n   * @return {number | BigNumber | Complex | Array | Matrix} The arc tangent of x\n   */\n  const atan = typed('atan', {\n    'number': function (x) {\n      return Math.atan(x);\n    },\n    'Complex': function (x) {\n      return x.atan();\n    },\n    'BigNumber': function (x) {\n      return x.atan();\n    },\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since atan(0) = 0\n      return deepMap(x, atan, true);\n    }\n  });\n  return atan;\n});","map":null,"metadata":{},"sourceType":"module"}