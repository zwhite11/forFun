{"ast":null,"code":"import { factory } from '../../../utils/factory';\nconst name = 'algorithm10';\nconst dependencies = ['typed', 'DenseMatrix'];\nexport const createAlgorithm10 =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  DenseMatrix\n}) => {\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked NZ times (number of nonzero items in S).\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  b          ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n  return function algorithm10(s, b, callback, inverse) {\n    // sparse matrix arrays\n    const avalues = s._values;\n    const aindex = s._index;\n    const aptr = s._ptr;\n    const asize = s._size;\n    const adt = s._datatype; // sparse matrix cannot be a Pattern matrix\n\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    } // rows & columns\n\n\n    const rows = asize[0];\n    const columns = asize[1]; // datatype\n\n    let dt; // callback signature to use\n\n    let cf = callback; // process data types\n\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt; // convert b to the same datatype\n\n      b = typed.convert(b, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    const cdata = []; // matrix\n\n    const c = new DenseMatrix({\n      data: cdata,\n      size: [rows, columns],\n      datatype: dt\n    }); // workspaces\n\n    const x = []; // marks indicating we have a value in x for a given column\n\n    const w = []; // loop columns\n\n    for (let j = 0; j < columns; j++) {\n      // columns mark\n      const mark = j + 1; // values in j\n\n      for (let k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        const r = aindex[k]; // update workspace\n\n        x[r] = avalues[k];\n        w[r] = mark;\n      } // loop rows\n\n\n      for (let i = 0; i < rows; i++) {\n        // initialize C on first column\n        if (j === 0) {\n          // create row array\n          cdata[i] = [];\n        } // check sparse matrix has a value @ i,j\n\n\n        if (w[i] === mark) {\n          // invoke callback, update C\n          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);\n        } else {\n          // dense matrix value @ i, j\n          cdata[i][j] = b;\n        }\n      }\n    } // return sparse matrix\n\n\n    return c;\n  };\n});","map":null,"metadata":{},"sourceType":"module"}