{"ast":null,"code":"import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual';\nimport { nearlyEqual } from '../../utils/number';\nimport { factory } from '../../utils/factory';\nimport { createAlgorithm03 } from '../../type/matrix/utils/algorithm03';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm05 } from '../../type/matrix/utils/algorithm05';\nconst name = 'compare';\nconst dependencies = ['typed', 'config', 'matrix', 'equalScalar', 'BigNumber', 'Fraction', 'DenseMatrix'];\nexport const createCompare =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  config,\n  equalScalar,\n  matrix,\n  BigNumber,\n  Fraction,\n  DenseMatrix\n}) => {\n  const algorithm03 = createAlgorithm03({\n    typed\n  });\n  const algorithm05 = createAlgorithm05({\n    typed,\n    equalScalar\n  });\n  const algorithm12 = createAlgorithm12({\n    typed,\n    DenseMatrix\n  });\n  const algorithm13 = createAlgorithm13({\n    typed\n  });\n  const algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.\n   *\n   * x and y are considered equal when the relative difference between x and y\n   * is smaller than the configured epsilon. The function cannot be used to\n   * compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.compare(x, y)\n   *\n   * Examples:\n   *\n   *    math.compare(6, 1)           // returns 1\n   *    math.compare(2, 3)           // returns -1\n   *    math.compare(7, 7)           // returns 0\n   *    math.compare('10', '2')      // returns 1\n   *    math.compare('1000', '1e3')  // returns 0\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('40 mm')\n   *    math.compare(a, b)           // returns 1\n   *\n   *    math.compare(2, [1, 2, 3])   // returns [1, 0, -1]\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, larger, largerEq, compareNatural, compareText\n   *\n   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare\n   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison:\n   *                                                          1 when x > y, -1 when x < y, and 0 when x == y.\n   */\n\n  const compare = typed(name, {\n    'boolean, boolean': function (x, y) {\n      return x === y ? 0 : x > y ? 1 : -1;\n    },\n    'number, number': function (x, y) {\n      return nearlyEqual(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;\n    },\n    'BigNumber, BigNumber': function (x, y) {\n      return bigNearlyEqual(x, y, config.epsilon) ? new BigNumber(0) : new BigNumber(x.cmp(y));\n    },\n    'Fraction, Fraction': function (x, y) {\n      return new Fraction(x.compare(y));\n    },\n    'Complex, Complex': function () {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    },\n    'Unit, Unit': function (x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return compare(x.value, y.value);\n    },\n    'SparseMatrix, SparseMatrix': function (x, y) {\n      return algorithm05(x, y, compare);\n    },\n    'SparseMatrix, DenseMatrix': function (x, y) {\n      return algorithm03(y, x, compare, true);\n    },\n    'DenseMatrix, SparseMatrix': function (x, y) {\n      return algorithm03(x, y, compare, false);\n    },\n    'DenseMatrix, DenseMatrix': function (x, y) {\n      return algorithm13(x, y, compare);\n    },\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return compare(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return compare(matrix(x), y);\n    },\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return compare(x, matrix(y));\n    },\n    'SparseMatrix, any': function (x, y) {\n      return algorithm12(x, y, compare, false);\n    },\n    'DenseMatrix, any': function (x, y) {\n      return algorithm14(x, y, compare, false);\n    },\n    'any, SparseMatrix': function (x, y) {\n      return algorithm12(y, x, compare, true);\n    },\n    'any, DenseMatrix': function (x, y) {\n      return algorithm14(y, x, compare, true);\n    },\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, compare, false).valueOf();\n    },\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, compare, true).valueOf();\n    }\n  });\n  return compare;\n});\nexport const createCompareNumber =\n/* #__PURE__ */\nfactory(name, ['typed', 'config'], ({\n  typed,\n  config\n}) => {\n  return typed(name, {\n    'number, number': function (x, y) {\n      return nearlyEqual(x, y, config.epsilon) ? 0 : x > y ? 1 : -1;\n    }\n  });\n});","map":null,"metadata":{},"sourceType":"module"}