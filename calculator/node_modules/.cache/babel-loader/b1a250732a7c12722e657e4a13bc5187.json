{"ast":null,"code":"import { deepMap } from '../../utils/collection';\nimport { isInteger as isIntegerNumber } from '../../utils/number';\nimport { factory } from '../../utils/factory';\nconst name = 'isInteger';\nconst dependencies = ['typed'];\nexport const createIsInteger =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed\n}) => {\n  /**\n   * Test whether a value is an integer number.\n   * The function supports `number`, `BigNumber`, and `Fraction`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isInteger(x)\n   *\n   * Examples:\n   *\n   *    math.isInteger(2)                     // returns true\n   *    math.isInteger(0)                     // returns true\n   *    math.isInteger(0.5)                   // returns false\n   *    math.isInteger(math.bignumber(500))   // returns true\n   *    math.isInteger(math.fraction(4))      // returns true\n   *    math.isInteger('3')                   // returns true\n   *    math.isInteger([3, 0.5, -2])          // returns [true, false, true]\n   *    math.isInteger(math.complex('2-4i')   // throws an error\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isNegative, isZero\n   *\n   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested\n   * @return {boolean}  Returns true when `x` contains a numeric, integer value.\n   *                    Throws an error in case of an unknown data type.\n   */\n  const isInteger = typed(name, {\n    'number': isIntegerNumber,\n    // TODO: what to do with isInteger(add(0.1, 0.2))  ?\n    'BigNumber': function (x) {\n      return x.isInt();\n    },\n    'Fraction': function (x) {\n      return x.d === 1 && isFinite(x.n);\n    },\n    'Array | Matrix': function (x) {\n      return deepMap(x, isInteger);\n    }\n  });\n  return isInteger;\n});","map":null,"metadata":{},"sourceType":"module"}