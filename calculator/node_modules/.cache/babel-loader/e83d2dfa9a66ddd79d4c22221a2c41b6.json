{"ast":null,"code":"import { isSymbolNode } from '../../../utils/is';\n/**\n * Compile an inline expression like \"x > 0\"\n * @param {Node} expression\n * @param {Object} math\n * @param {Object} scope\n * @return {function} Returns a function with one argument which fills in the\n *                    undefined variable (like \"x\") and evaluates the expression\n */\n\nexport function compileInlineExpression(expression, math, scope) {\n  // find an undefined symbol\n  const symbol = expression.filter(function (node) {\n    return isSymbolNode(node) && !(node.name in math) && !(node.name in scope);\n  })[0];\n\n  if (!symbol) {\n    throw new Error('No undefined variable found in inline expression \"' + expression + '\"');\n  } // create a test function for this equation\n\n\n  const name = symbol.name; // variable name\n\n  const subScope = Object.create(scope);\n  const eq = expression.compile();\n  return function inlineExpression(x) {\n    subScope[name] = x;\n    return eq.evaluate(subScope);\n  };\n}","map":null,"metadata":{},"sourceType":"module"}