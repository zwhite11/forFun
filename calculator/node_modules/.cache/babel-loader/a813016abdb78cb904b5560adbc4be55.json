{"ast":null,"code":"import { factory } from '../../../utils/factory';\nconst name = 'sparse';\nconst dependencies = ['typed', 'SparseMatrix'];\nexport const createSparse =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  SparseMatrix\n}) => {\n  /**\n   * Create a Sparse Matrix. The function creates a new `math.Matrix` object from\n   * an `Array`. A Matrix has utility functions to manipulate the data in the\n   * matrix, like getting the size and getting or setting values in the matrix.\n   *\n   * Syntax:\n   *\n   *    math.sparse()               // creates an empty sparse matrix.\n   *    math.sparse(data)           // creates a sparse matrix with initial data.\n   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.\n   *\n   * Examples:\n   *\n   *    let m = math.sparse([[1, 2], [3, 4]])\n   *    m.size()                        // Array [2, 2]\n   *    m.resize([3, 2], 5)\n   *    m.valueOf()                     // Array [[1, 2], [3, 4], [5, 5]]\n   *    m.get([1, 0])                    // number 3\n   *\n   * See also:\n   *\n   *    bignumber, boolean, complex, index, number, string, unit, matrix\n   *\n   * @param {Array | Matrix} [data]    A two dimensional array\n   *\n   * @return {Matrix} The created matrix\n   */\n  return typed(name, {\n    '': function () {\n      return new SparseMatrix([]);\n    },\n    'string': function (datatype) {\n      return new SparseMatrix([], datatype);\n    },\n    'Array | Matrix': function (data) {\n      return new SparseMatrix(data);\n    },\n    'Array | Matrix, string': function (data, datatype) {\n      return new SparseMatrix(data, datatype);\n    }\n  });\n});","map":null,"metadata":{},"sourceType":"module"}