{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { cubeNumber } from '../../plain/number';\nconst name = 'cube';\nconst dependencies = ['typed'];\nexport const createCube =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed\n}) => {\n  /**\n   * Compute the cube of a value, `x * x * x`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.cube(x)\n   *\n   * Examples:\n   *\n   *    math.cube(2)            // returns number 8\n   *    math.pow(2, 3)          // returns number 8\n   *    math.cube(4)            // returns number 64\n   *    4 * 4 * 4               // returns number 64\n   *\n   *    math.cube([1, 2, 3, 4]) // returns Array [1, 8, 27, 64]\n   *\n   * See also:\n   *\n   *    multiply, square, pow, cbrt\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x  Number for which to calculate the cube\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} Cube of x\n   */\n  const cube = typed(name, {\n    'number': cubeNumber,\n    'Complex': function (x) {\n      return x.mul(x).mul(x); // Is faster than pow(x, 3)\n    },\n    'BigNumber': function (x) {\n      return x.times(x).times(x);\n    },\n    'Fraction': function (x) {\n      return x.pow(3); // Is faster than mul()mul()mul()\n    },\n    'Array | Matrix': function (x) {\n      // deep map collection, skip zeros since cube(0) = 0\n      return deepMap(x, cube, true);\n    },\n    'Unit': function (x) {\n      return x.pow(3);\n    }\n  });\n  return cube;\n});","map":null,"metadata":{},"sourceType":"module"}