{"ast":null,"code":"import { bitXor as bigBitXor } from '../../utils/bignumber/bitwise';\nimport { createAlgorithm03 } from '../../type/matrix/utils/algorithm03';\nimport { createAlgorithm07 } from '../../type/matrix/utils/algorithm07';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { factory } from '../../utils/factory';\nimport { bitXorNumber } from '../../plain/number';\nconst name = 'bitXor';\nconst dependencies = ['typed', 'matrix', 'DenseMatrix'];\nexport const createBitXor =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  matrix,\n  DenseMatrix\n}) => {\n  const algorithm03 = createAlgorithm03({\n    typed\n  });\n  const algorithm07 = createAlgorithm07({\n    typed,\n    DenseMatrix\n  });\n  const algorithm12 = createAlgorithm12({\n    typed,\n    DenseMatrix\n  });\n  const algorithm13 = createAlgorithm13({\n    typed\n  });\n  const algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Bitwise XOR two values, `x ^ y`.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.bitXor(x, y)\n   *\n   * Examples:\n   *\n   *    math.bitXor(1, 2)               // returns number 3\n   *\n   *    math.bitXor([2, 3, 4], 4)       // returns Array [6, 7, 0]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitOr, leftShift, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x First value to xor\n   * @param  {number | BigNumber | Array | Matrix} y Second value to xor\n   * @return {number | BigNumber | Array | Matrix} XOR of `x` and `y`\n   */\n\n  const bitXor = typed(name, {\n    'number, number': bitXorNumber,\n    'BigNumber, BigNumber': bigBitXor,\n    'SparseMatrix, SparseMatrix': function (x, y) {\n      return algorithm07(x, y, bitXor);\n    },\n    'SparseMatrix, DenseMatrix': function (x, y) {\n      return algorithm03(y, x, bitXor, true);\n    },\n    'DenseMatrix, SparseMatrix': function (x, y) {\n      return algorithm03(x, y, bitXor, false);\n    },\n    'DenseMatrix, DenseMatrix': function (x, y) {\n      return algorithm13(x, y, bitXor);\n    },\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return bitXor(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return bitXor(matrix(x), y);\n    },\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return bitXor(x, matrix(y));\n    },\n    'SparseMatrix, any': function (x, y) {\n      return algorithm12(x, y, bitXor, false);\n    },\n    'DenseMatrix, any': function (x, y) {\n      return algorithm14(x, y, bitXor, false);\n    },\n    'any, SparseMatrix': function (x, y) {\n      return algorithm12(y, x, bitXor, true);\n    },\n    'any, DenseMatrix': function (x, y) {\n      return algorithm14(y, x, bitXor, true);\n    },\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, bitXor, false).valueOf();\n    },\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, bitXor, true).valueOf();\n    }\n  });\n  return bitXor;\n});","map":null,"metadata":{},"sourceType":"module"}