{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nconst name = 're';\nconst dependencies = ['typed'];\nexport const createRe =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed\n}) => {\n  /**\n   * Get the real part of a complex number.\n   * For a complex number `a + bi`, the function returns `a`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.re(x)\n   *\n   * Examples:\n   *\n   *    const a = math.complex(2, 3)\n   *    math.re(a)                     // returns number 2\n   *    math.im(a)                     // returns number 3\n   *\n   *    math.re(math.complex('-5.2i')) // returns number 0\n   *    math.re(math.complex(2.4))     // returns number 2.4\n   *\n   * See also:\n   *\n   *    im, conj, abs, arg\n   *\n   * @param {number | BigNumber | Complex | Array | Matrix} x\n   *            A complex number or array with complex numbers\n   * @return {number | BigNumber | Array | Matrix} The real part of x\n   */\n  const re = typed(name, {\n    'number': function (x) {\n      return x;\n    },\n    'BigNumber': function (x) {\n      return x;\n    },\n    'Complex': function (x) {\n      return x.re;\n    },\n    'Array | Matrix': function (x) {\n      return deepMap(x, re);\n    }\n  });\n  return re;\n});","map":null,"metadata":{},"sourceType":"module"}