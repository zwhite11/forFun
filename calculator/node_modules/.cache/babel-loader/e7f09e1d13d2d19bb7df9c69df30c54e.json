{"ast":null,"code":"import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual';\nimport { nearlyEqual } from '../../utils/number';\nimport { factory } from '../../utils/factory';\nimport { createAlgorithm03 } from '../../type/matrix/utils/algorithm03';\nimport { createAlgorithm07 } from '../../type/matrix/utils/algorithm07';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nconst name = 'smaller';\nconst dependencies = ['typed', 'config', 'matrix', 'DenseMatrix'];\nexport const createSmaller =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  config,\n  matrix,\n  DenseMatrix\n}) => {\n  const algorithm03 = createAlgorithm03({\n    typed\n  });\n  const algorithm07 = createAlgorithm07({\n    typed,\n    DenseMatrix\n  });\n  const algorithm12 = createAlgorithm12({\n    typed,\n    DenseMatrix\n  });\n  const algorithm13 = createAlgorithm13({\n    typed\n  });\n  const algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Test whether value x is smaller than y.\n   *\n   * The function returns true when x is smaller than y and the relative\n   * difference between x and y is smaller than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.smaller(x, y)\n   *\n   * Examples:\n   *\n   *    math.smaller(2, 3)            // returns true\n   *    math.smaller(5, 2 * 2)        // returns false\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('2 inch')\n   *    math.smaller(a, b)            // returns true\n   *\n   * See also:\n   *\n   *    equal, unequal, smallerEq, smaller, smallerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false\n   */\n\n  const smaller = typed(name, {\n    'boolean, boolean': function (x, y) {\n      return x < y;\n    },\n    'number, number': function (x, y) {\n      return x < y && !nearlyEqual(x, y, config.epsilon);\n    },\n    'BigNumber, BigNumber': function (x, y) {\n      return x.lt(y) && !bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': function (x, y) {\n      return x.compare(y) === -1;\n    },\n    'Complex, Complex': function (x, y) {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    },\n    'Unit, Unit': function (x, y) {\n      if (!x.equalBase(y)) {\n        throw new Error('Cannot compare units with different base');\n      }\n\n      return smaller(x.value, y.value);\n    },\n    'SparseMatrix, SparseMatrix': function (x, y) {\n      return algorithm07(x, y, smaller);\n    },\n    'SparseMatrix, DenseMatrix': function (x, y) {\n      return algorithm03(y, x, smaller, true);\n    },\n    'DenseMatrix, SparseMatrix': function (x, y) {\n      return algorithm03(x, y, smaller, false);\n    },\n    'DenseMatrix, DenseMatrix': function (x, y) {\n      return algorithm13(x, y, smaller);\n    },\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return smaller(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return smaller(matrix(x), y);\n    },\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return smaller(x, matrix(y));\n    },\n    'SparseMatrix, any': function (x, y) {\n      return algorithm12(x, y, smaller, false);\n    },\n    'DenseMatrix, any': function (x, y) {\n      return algorithm14(x, y, smaller, false);\n    },\n    'any, SparseMatrix': function (x, y) {\n      return algorithm12(y, x, smaller, true);\n    },\n    'any, DenseMatrix': function (x, y) {\n      return algorithm14(y, x, smaller, true);\n    },\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, smaller, false).valueOf();\n    },\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, smaller, true).valueOf();\n    }\n  });\n  return smaller;\n});\nexport const createSmallerNumber =\n/* #__PURE__ */\nfactory(name, ['typed', 'config'], ({\n  typed,\n  config\n}) => {\n  return typed(name, {\n    'number, number': function (x, y) {\n      return x < y && !nearlyEqual(x, y, config.epsilon);\n    }\n  });\n});","map":null,"metadata":{},"sourceType":"module"}