{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { deepMap } from '../../utils/collection';\nimport { acschNumber } from '../../plain/number';\nconst name = 'acsch';\nconst dependencies = ['typed', 'BigNumber'];\nexport const createAcsch =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  BigNumber\n}) => {\n  /**\n   * Calculate the hyperbolic arccosecant of a value,\n   * defined as `acsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1))`.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.acsch(x)\n   *\n   * Examples:\n   *\n   *    math.acsch(0.5)       // returns 1.4436354751788103\n   *\n   * See also:\n   *\n   *    asech, acoth\n   *\n   * @param {number | Complex | Array | Matrix} x  Function input\n   * @return {number | Complex | Array | Matrix} Hyperbolic arccosecant of x\n   */\n  const acsch = typed(name, {\n    'number': acschNumber,\n    'Complex': function (x) {\n      return x.acsch();\n    },\n    'BigNumber': function (x) {\n      return new BigNumber(1).div(x).asinh();\n    },\n    'Array | Matrix': function (x) {\n      return deepMap(x, acsch);\n    }\n  });\n  return acsch;\n});","map":null,"metadata":{},"sourceType":"module"}