{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { createAlgorithm03 } from '../../type/matrix/utils/algorithm03';\nimport { createAlgorithm07 } from '../../type/matrix/utils/algorithm07';\nimport { createAlgorithm12 } from '../../type/matrix/utils/algorithm12';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nconst name = 'unequal';\nconst dependencies = ['typed', 'config', 'equalScalar', 'matrix', 'DenseMatrix'];\nexport const createUnequal =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  config,\n  equalScalar,\n  matrix,\n  DenseMatrix\n}) => {\n  const algorithm03 = createAlgorithm03({\n    typed\n  });\n  const algorithm07 = createAlgorithm07({\n    typed,\n    DenseMatrix\n  });\n  const algorithm12 = createAlgorithm12({\n    typed,\n    DenseMatrix\n  });\n  const algorithm13 = createAlgorithm13({\n    typed\n  });\n  const algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Test whether two values are unequal.\n   *\n   * The function tests whether the relative difference between x and y is\n   * larger than the configured epsilon. The function cannot be used to compare\n   * values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.\n   * Strings are compared by their numerical value.\n   *\n   * Values `null` and `undefined` are compared strictly, thus `null` is unequal\n   * with everything except `null`, and `undefined` is unequal with everything\n   * except `undefined`.\n   *\n   * Syntax:\n   *\n   *    math.unequal(x, y)\n   *\n   * Examples:\n   *\n   *    math.unequal(2 + 2, 3)       // returns true\n   *    math.unequal(2 + 2, 4)       // returns false\n   *\n   *    const a = math.unit('50 cm')\n   *    const b = math.unit('5 m')\n   *    math.unequal(a, b)           // returns false\n   *\n   *    const c = [2, 5, 1]\n   *    const d = [2, 7, 1]\n   *\n   *    math.unequal(c, d)           // returns [false, true, false]\n   *    math.deepEqual(c, d)         // returns false\n   *\n   *    math.unequal(0, null)        // returns true\n   * See also:\n   *\n   *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false\n   */\n\n  const unequal = typed('unequal', {\n    'any, any': function (x, y) {\n      // strict equality for null and undefined?\n      if (x === null) {\n        return y !== null;\n      }\n\n      if (y === null) {\n        return x !== null;\n      }\n\n      if (x === undefined) {\n        return y !== undefined;\n      }\n\n      if (y === undefined) {\n        return x !== undefined;\n      }\n\n      return _unequal(x, y);\n    },\n    'SparseMatrix, SparseMatrix': function (x, y) {\n      return algorithm07(x, y, _unequal);\n    },\n    'SparseMatrix, DenseMatrix': function (x, y) {\n      return algorithm03(y, x, _unequal, true);\n    },\n    'DenseMatrix, SparseMatrix': function (x, y) {\n      return algorithm03(x, y, _unequal, false);\n    },\n    'DenseMatrix, DenseMatrix': function (x, y) {\n      return algorithm13(x, y, _unequal);\n    },\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return unequal(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return unequal(matrix(x), y);\n    },\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return unequal(x, matrix(y));\n    },\n    'SparseMatrix, any': function (x, y) {\n      return algorithm12(x, y, _unequal, false);\n    },\n    'DenseMatrix, any': function (x, y) {\n      return algorithm14(x, y, _unequal, false);\n    },\n    'any, SparseMatrix': function (x, y) {\n      return algorithm12(y, x, _unequal, true);\n    },\n    'any, DenseMatrix': function (x, y) {\n      return algorithm14(y, x, _unequal, true);\n    },\n    'Array, any': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(x), y, _unequal, false).valueOf();\n    },\n    'any, Array': function (x, y) {\n      // use matrix implementation\n      return algorithm14(matrix(y), x, _unequal, true).valueOf();\n    }\n  });\n\n  function _unequal(x, y) {\n    return !equalScalar(x, y);\n  }\n\n  return unequal;\n});\nexport const createUnequalNumber = factory(name, ['typed', 'equalScalar'], ({\n  typed,\n  equalScalar\n}) => {\n  return typed(name, {\n    'any, any': function (x, y) {\n      // strict equality for null and undefined?\n      if (x === null) {\n        return y !== null;\n      }\n\n      if (y === null) {\n        return x !== null;\n      }\n\n      if (x === undefined) {\n        return y !== undefined;\n      }\n\n      if (y === undefined) {\n        return x !== undefined;\n      }\n\n      return !equalScalar(x, y);\n    }\n  });\n});","map":null,"metadata":{},"sourceType":"module"}