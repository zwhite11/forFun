{"ast":null,"code":"import { isBigNumber, isCollection, isNumber } from '../../utils/is';\nimport { factory } from '../../utils/factory';\nimport { errorTransform } from './utils/errorTransform';\nimport { createSum } from '../../function/statistics/sum';\n/**\n * Attach a transform function to math.sum\n * Adds a property transform containing the transform function.\n *\n * This transform changed the last `dim` parameter of function mean\n * from one-based to zero based\n */\n\nconst name = 'sum';\nconst dependencies = ['typed', 'config', 'add', '?bignumber', '?fraction'];\nexport const createSumTransform =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  config,\n  add,\n  bignumber,\n  fraction\n}) => {\n  const sum = createSum({\n    typed,\n    config,\n    add,\n    bignumber,\n    fraction\n  });\n  return typed(name, {\n    '...any': function (args) {\n      // change last argument dim from one-based to zero-based\n      if (args.length === 2 && isCollection(args[0])) {\n        const dim = args[1];\n\n        if (isNumber(dim)) {\n          args[1] = dim - 1;\n        } else if (isBigNumber(dim)) {\n          args[1] = dim.minus(1);\n        }\n      }\n\n      try {\n        return sum.apply(null, args);\n      } catch (err) {\n        throw errorTransform(err);\n      }\n    }\n  });\n}, {\n  isTransformFunction: true\n});","map":null,"metadata":{},"sourceType":"module"}