{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { clone } from '../../utils/object';\nimport { validateIndex } from '../../utils/array';\nconst name = 'row';\nconst dependencies = ['typed', 'Index', 'matrix', 'range'];\nexport const createRow =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  Index,\n  matrix,\n  range\n}) => {\n  /**\n   * Return a row from a Matrix.\n   *\n   * Syntax:\n   *\n   *     math.row(value, index)\n   *\n   * Example:\n   *\n   *     // get a row\n   *     const d = [[1, 2], [3, 4]]\n   *     math.row(d, 1) // returns [3, 4]\n   *\n   * See also:\n   *\n   *     column\n   *\n   * @param {Array | Matrix } value   An array or matrix\n   * @param {number} row              The index of the row\n   * @return {Array | Matrix}         The retrieved row\n   */\n  const row = typed(name, {\n    'Matrix, number': _row,\n    'Array, number': function (value, row) {\n      return _row(matrix(clone(value)), row).valueOf();\n    }\n  });\n  return row;\n  /**\n   * Retrieve a row of a matrix\n   * @param {Matrix } value  A matrix\n   * @param {number} row     The index of the row\n   * @return {Matrix}        The retrieved row\n   */\n\n  function _row(value, row) {\n    // check dimensions\n    if (value.size().length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n\n    validateIndex(row, value.size()[0]);\n    const columnRange = range(0, value.size()[1]);\n    const index = new Index(row, columnRange);\n    return value.subset(index);\n  }\n});","map":null,"metadata":{},"sourceType":"module"}