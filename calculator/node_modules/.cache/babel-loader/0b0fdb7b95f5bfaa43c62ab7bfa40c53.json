{"ast":null,"code":"import { factory } from '../../utils/factory';\nimport { createAlgorithm01 } from '../../type/matrix/utils/algorithm01';\nimport { createAlgorithm02 } from '../../type/matrix/utils/algorithm02';\nimport { createAlgorithm06 } from '../../type/matrix/utils/algorithm06';\nimport { createAlgorithm11 } from '../../type/matrix/utils/algorithm11';\nimport { createAlgorithm13 } from '../../type/matrix/utils/algorithm13';\nimport { createAlgorithm14 } from '../../type/matrix/utils/algorithm14';\nimport { nthRootNumber } from '../../plain/number';\nconst name = 'nthRoot';\nconst dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber'];\nexport const createNthRoot =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  matrix,\n  equalScalar,\n  BigNumber\n}) => {\n  const algorithm01 = createAlgorithm01({\n    typed\n  });\n  const algorithm02 = createAlgorithm02({\n    typed,\n    equalScalar\n  });\n  const algorithm06 = createAlgorithm06({\n    typed,\n    equalScalar\n  });\n  const algorithm11 = createAlgorithm11({\n    typed,\n    equalScalar\n  });\n  const algorithm13 = createAlgorithm13({\n    typed\n  });\n  const algorithm14 = createAlgorithm14({\n    typed\n  });\n  /**\n   * Calculate the nth root of a value.\n   * The principal nth root of a positive real number A, is the positive real\n   * solution of the equation\n   *\n   *     x^root = A\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *     math.nthRoot(a)\n   *     math.nthRoot(a, root)\n   *\n   * Examples:\n   *\n   *     math.nthRoot(9, 2)    // returns 3, as 3^2 == 9\n   *     math.sqrt(9)          // returns 3, as 3^2 == 9\n   *     math.nthRoot(64, 3)   // returns 4, as 4^3 == 64\n   *\n   * See also:\n   *\n   *     sqrt, pow\n   *\n   * @param {number | BigNumber | Array | Matrix | Complex} a\n   *              Value for which to calculate the nth root\n   * @param {number | BigNumber} [root=2]    The root.\n   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`\n   */\n\n  const complexErr = '' + 'Complex number not supported in function nthRoot. ' + 'Use nthRoots instead.';\n  const nthRoot = typed(name, {\n    'number': function (x) {\n      return nthRootNumber(x, 2);\n    },\n    'number, number': nthRootNumber,\n    'BigNumber': function (x) {\n      return _bigNthRoot(x, new BigNumber(2));\n    },\n    'Complex': function (x) {\n      throw new Error(complexErr);\n    },\n    'Complex, number': function (x, y) {\n      throw new Error(complexErr);\n    },\n    'BigNumber, BigNumber': _bigNthRoot,\n    'Array | Matrix': function (x) {\n      return nthRoot(x, 2);\n    },\n    'SparseMatrix, SparseMatrix': function (x, y) {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // sparse + sparse\n        return algorithm06(x, y, nthRoot);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    },\n    'SparseMatrix, DenseMatrix': function (x, y) {\n      return algorithm02(y, x, nthRoot, true);\n    },\n    'DenseMatrix, SparseMatrix': function (x, y) {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // dense + sparse\n        return algorithm01(x, y, nthRoot, false);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    },\n    'DenseMatrix, DenseMatrix': function (x, y) {\n      return algorithm13(x, y, nthRoot);\n    },\n    'Array, Array': function (x, y) {\n      // use matrix implementation\n      return nthRoot(matrix(x), matrix(y)).valueOf();\n    },\n    'Array, Matrix': function (x, y) {\n      // use matrix implementation\n      return nthRoot(matrix(x), y);\n    },\n    'Matrix, Array': function (x, y) {\n      // use matrix implementation\n      return nthRoot(x, matrix(y));\n    },\n    'SparseMatrix, number | BigNumber': function (x, y) {\n      return algorithm11(x, y, nthRoot, false);\n    },\n    'DenseMatrix, number | BigNumber': function (x, y) {\n      return algorithm14(x, y, nthRoot, false);\n    },\n    'number | BigNumber, SparseMatrix': function (x, y) {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // sparse - scalar\n        return algorithm11(y, x, nthRoot, true);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    },\n    'number | BigNumber, DenseMatrix': function (x, y) {\n      return algorithm14(y, x, nthRoot, true);\n    },\n    'Array, number | BigNumber': function (x, y) {\n      // use matrix implementation\n      return nthRoot(matrix(x), y).valueOf();\n    },\n    'number | BigNumber, Array': function (x, y) {\n      // use matrix implementation\n      return nthRoot(x, matrix(y)).valueOf();\n    }\n  });\n  return nthRoot;\n  /**\n   * Calculate the nth root of a for BigNumbers, solve x^root == a\n   * https://rosettacode.org/wiki/Nth_root#JavaScript\n   * @param {BigNumber} a\n   * @param {BigNumber} root\n   * @private\n   */\n\n  function _bigNthRoot(a, root) {\n    const precision = BigNumber.precision;\n    const Big = BigNumber.clone({\n      precision: precision + 2\n    });\n    const zero = new BigNumber(0);\n    const one = new Big(1);\n    const inv = root.isNegative();\n\n    if (inv) {\n      root = root.neg();\n    }\n\n    if (root.isZero()) {\n      throw new Error('Root must be non-zero');\n    }\n\n    if (a.isNegative() && !root.abs().mod(2).equals(1)) {\n      throw new Error('Root must be odd when a is negative.');\n    } // edge cases zero and infinity\n\n\n    if (a.isZero()) {\n      return inv ? new Big(Infinity) : 0;\n    }\n\n    if (!a.isFinite()) {\n      return inv ? zero : a;\n    }\n\n    let x = a.abs().pow(one.div(root)); // If a < 0, we require that root is an odd integer,\n    // so (-1) ^ (1/root) = -1\n\n    x = a.isNeg() ? x.neg() : x;\n    return new BigNumber((inv ? one.div(x) : x).toPrecision(precision));\n  }\n});\nexport const createNthRootNumber =\n/* #__PURE__ */\nfactory(name, ['typed'], ({\n  typed\n}) => {\n  return typed(name, {\n    'number': nthRootNumber,\n    'number, number': nthRootNumber\n  });\n});","map":null,"metadata":{},"sourceType":"module"}