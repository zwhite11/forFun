{"ast":null,"code":"const math = require(\"mathjs\");\n\nlet currentValue = \"\";\nlet expression = [];\nlet result = \"\";\nlet lastOperation = \"\";\n\nclass CalcFunctions {\n  constructor() {\n    currentValue = \"\";\n    expression = [];\n    result = \"\";\n  }\n\n  getCurrentValue() {\n    return currentValue;\n  }\n\n  getExpression() {\n    return expression;\n  }\n\n  getResult() {\n    return result;\n  }\n\n  enterDigit(digit) {\n    currentValue += digit;\n  }\n\n  clearEvery() {\n    if (currentValue === \"\") {\n      return;\n    }\n\n    expression = [];\n    currentValue = \"\";\n  }\n\n  percentage() {\n    if (currentValue === \"\") {\n      return;\n    }\n\n    currentValue = math.evaluate(currentValue + \" / 100\");\n  }\n\n  decimal() {\n    if (currentValue === \"\") {\n      currentValue = \"0.\";\n      return;\n    }\n\n    let lastChar = currentValue.charAt(currentValue.length - 1);\n\n    if (lastChar !== \".\") {\n      currentValue = currentValue + \".\";\n    }\n  }\n\n  plusMinus() {\n    if (currentValue === \"\") {\n      return;\n    }\n\n    if (currentValue.charAt(0) === \"-\") {\n      currentValue = currentValue.slice(1);\n    } else {\n      currentValue = \"-\" + currentValue;\n    }\n  }\n\n  add() {\n    if (currentValue === \"\") {\n      return;\n    }\n\n    expression.push(currentValue);\n    expression.push(\"+\");\n    currentValue = \"\";\n  }\n\n  subtract() {\n    if (currentValue === \"\") {\n      return;\n    }\n\n    expression.push(currentValue);\n    expression.push(\"-\");\n    currentValue = \"\";\n  }\n\n  multiply() {\n    if (currentValue === \"\") {\n      return;\n    }\n\n    expression.push(currentValue);\n    expression.push(\"*\");\n    currentValue = \"\";\n  }\n\n  divide() {\n    if (currentValue === \"\") {\n      return;\n    }\n\n    expression.push(currentValue);\n    expression.push(\"/\");\n    currentValue = \"\";\n  }\n\n  equals() {\n    if (currentValue === \"\") {\n      return;\n    }\n\n    let active = document.getElementById(\"keypad\").querySelectorAll(\".active\");\n    console.log(\"active: \", active.length);\n\n    if (active.length > 0) {\n      active[0].classList.remove(\"active\");\n    } else {\n      // keep running the last operator\n      console.log(\"expression\", expression);\n    }\n\n    expression.push(currentValue);\n    const joinedExpression = expression.join(\" \");\n    result = math.evaluate(joinedExpression).toString();\n    currentValue = result;\n    expression = [];\n  }\n\n}\n\nexport default CalcFunctions;","map":{"version":3,"sources":["C:\\Users\\zacsw\\Documents\\Projects - NoGit\\calculator\\src\\components\\calculator\\calcFunctions.js"],"names":["math","require","currentValue","expression","result","lastOperation","CalcFunctions","constructor","getCurrentValue","getExpression","getResult","enterDigit","digit","clearEvery","percentage","evaluate","decimal","lastChar","charAt","length","plusMinus","slice","add","push","subtract","multiply","divide","equals","active","document","getElementById","querySelectorAll","console","log","classList","remove","joinedExpression","join","toString"],"mappings":"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","sourcesContent":["const math = require(\"mathjs\");\r\n\r\nlet currentValue = \"\";\r\nlet expression = [];\r\nlet result = \"\";\r\nlet lastOperation = \"\";\r\n\r\nclass CalcFunctions {\r\n  constructor() {\r\n    currentValue = \"\";\r\n    expression = [];\r\n    result = \"\";\r\n\r\n  }\r\n\r\n  getCurrentValue() {\r\n    return currentValue;\r\n  }\r\n\r\n  getExpression() {\r\n    return expression;\r\n  }\r\n\r\n  getResult() {\r\n    return result;\r\n  }\r\n\r\n  enterDigit(digit) {\r\n    currentValue += digit;\r\n  }\r\n\r\n  clearEvery() {\r\n    if (currentValue === \"\") {\r\n      return;\r\n    }\r\n    expression = [];\r\n    currentValue = \"\";\r\n  }\r\n\r\n  percentage() {\r\n    if (currentValue === \"\") {\r\n      return;\r\n    }\r\n\r\n    currentValue = math.evaluate(currentValue + \" / 100\");\r\n  }\r\n\r\n  decimal() {\r\n    if (currentValue === \"\") {\r\n      currentValue = \"0.\";\r\n      return;\r\n    }\r\n\r\n    let lastChar = currentValue.charAt(currentValue.length - 1);\r\n    if (lastChar !== \".\") {\r\n      currentValue = currentValue + \".\";\r\n    }\r\n  }\r\n\r\n  plusMinus() {\r\n    if (currentValue === \"\") {\r\n      return;\r\n    }\r\n\r\n    if (currentValue.charAt(0) === \"-\") {\r\n      currentValue = currentValue.slice(1);\r\n    } else {\r\n      currentValue = \"-\" + currentValue;\r\n    }\r\n  }\r\n\r\n  add() {\r\n    if (currentValue === \"\") {\r\n      return;\r\n    }\r\n\r\n    expression.push(currentValue);\r\n    expression.push(\"+\");\r\n    currentValue = \"\";\r\n  }\r\n\r\n  subtract() {\r\n    if (currentValue === \"\") {\r\n      return;\r\n    }\r\n\r\n    expression.push(currentValue);\r\n    expression.push(\"-\");\r\n\r\n    currentValue = \"\";\r\n  }\r\n\r\n  multiply() {\r\n    if (currentValue === \"\") {\r\n      return;\r\n    }\r\n\r\n    expression.push(currentValue);\r\n    expression.push(\"*\");\r\n    currentValue = \"\";\r\n  }\r\n\r\n  divide() {\r\n    if (currentValue === \"\") {\r\n      return;\r\n    }\r\n\r\n    expression.push(currentValue);\r\n    expression.push(\"/\");\r\n    currentValue = \"\";\r\n  }\r\n\r\n  equals() {\r\n    if (currentValue === \"\") {\r\n      return;\r\n    }\r\n\r\n    let active = document.getElementById(\"keypad\").querySelectorAll(\".active\");\r\n    console.log(\"active: \", active.length);\r\n\r\n    if (active.length > 0) {\r\n      active[0].classList.remove(\"active\");\r\n    }\r\n    else {\r\n      // keep running the last operator\r\n      console.log(\"expression\", expression);\r\n    }\r\n\r\n\r\n\r\n    expression.push(currentValue);\r\n\r\n    const joinedExpression = expression.join(\" \");\r\n\r\n    result = math.evaluate(joinedExpression).toString();\r\n    currentValue = result;\r\n    expression = [];\r\n  }\r\n}\r\n\r\nexport default CalcFunctions;\r\n"]},"metadata":{},"sourceType":"module"}