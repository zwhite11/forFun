{"ast":null,"code":"import { factory } from '../../../utils/factory';\nimport { deepMap } from '../../../utils/collection';\nconst name = 'complex';\nconst dependencies = ['typed', 'Complex'];\nexport const createComplex =\n/* #__PURE__ */\nfactory(name, dependencies, ({\n  typed,\n  Complex\n}) => {\n  /**\n   * Create a complex value or convert a value to a complex value.\n   *\n   * Syntax:\n   *\n   *     math.complex()                           // creates a complex value with zero\n   *                                              // as real and imaginary part.\n   *     math.complex(re : number, im : string)   // creates a complex value with provided\n   *                                              // values for real and imaginary part.\n   *     math.complex(re : number)                // creates a complex value with provided\n   *                                              // real value and zero imaginary part.\n   *     math.complex(complex : Complex)          // clones the provided complex value.\n   *     math.complex(arg : string)               // parses a string into a complex value.\n   *     math.complex(array : Array)              // converts the elements of the array\n   *                                              // or matrix element wise into a\n   *                                              // complex value.\n   *     math.complex({re: number, im: number})   // creates a complex value with provided\n   *                                              // values for real an imaginary part.\n   *     math.complex({r: number, phi: number})   // creates a complex value with provided\n   *                                              // polar coordinates\n   *\n   * Examples:\n   *\n   *    const a = math.complex(3, -4)     // a = Complex 3 - 4i\n   *    a.re = 5                          // a = Complex 5 - 4i\n   *    const i = a.im                    // Number -4\n   *    const b = math.complex('2 + 6i')  // Complex 2 + 6i\n   *    const c = math.complex()          // Complex 0 + 0i\n   *    const d = math.add(a, b)          // Complex 5 + 2i\n   *\n   * See also:\n   *\n   *    bignumber, boolean, index, matrix, number, string, unit\n   *\n   * @param {* | Array | Matrix} [args]\n   *            Arguments specifying the real and imaginary part of the complex number\n   * @return {Complex | Array | Matrix} Returns a complex value\n   */\n  const complex = typed('complex', {\n    '': function () {\n      return Complex.ZERO;\n    },\n    'number': function (x) {\n      return new Complex(x, 0);\n    },\n    'number, number': function (re, im) {\n      return new Complex(re, im);\n    },\n    // TODO: this signature should be redundant\n    'BigNumber, BigNumber': function (re, im) {\n      return new Complex(re.toNumber(), im.toNumber());\n    },\n    'Fraction': function (x) {\n      return new Complex(x.valueOf(), 0);\n    },\n    'Complex': function (x) {\n      return x.clone();\n    },\n    'string': function (x) {\n      return Complex(x); // for example '2 + 3i'\n    },\n    'null': function (x) {\n      return Complex(0);\n    },\n    'Object': function (x) {\n      if ('re' in x && 'im' in x) {\n        return new Complex(x.re, x.im);\n      }\n\n      if ('r' in x && 'phi' in x || 'abs' in x && 'arg' in x) {\n        return new Complex(x);\n      }\n\n      throw new Error('Expected object with properties (re and im) or (r and phi) or (abs and arg)');\n    },\n    'Array | Matrix': function (x) {\n      return deepMap(x, complex);\n    }\n  });\n  return complex;\n});","map":null,"metadata":{},"sourceType":"module"}